{
  "generatedAt": "2025-10-19T02:40:27.809563+00:00",
  "source": "/Users/gramjos/Documents/try_hosting_Vault",
  "siteTitle": "Home",
  "homePageId": "root",
  "aboutPageId": null,
  "pages": {
    "Astro/Stary": {
      "id": "Astro/Stary",
      "type": "file",
      "title": "Stary",
      "content": "<figure class=\"image-block\"><img src=\"fold.png\" alt=\"fold\" /></figure>\n<figure class=\"code-block\"><pre id=\"code-block-1\" data-language=\"python\"><code class=\"code-block language-python\">import torch</code></pre></figure>",
      "directories": [],
      "files": [],
      "parent": "Astro",
      "basePath": "Astro",
      "sourcePath": "Astro/Stary.md",
      "aliases": [
        "Astro/Stary.html"
      ]
    },
    "Astro": {
      "id": "Astro",
      "type": "directory",
      "title": "Astro",
      "content": "",
      "directories": [],
      "files": [
        "Astro/Stary"
      ],
      "parent": "root",
      "basePath": "Astro",
      "sourcePath": "Astro/README.md",
      "aliases": [
        "Astro/README.html"
      ]
    },
    "Flutter_Cookbook_Simone/Animate": {
      "id": "Flutter_Cookbook_Simone/Animate",
      "type": "file",
      "title": "Implicit Animation with `AnimatedContainer`",
      "content": "<p>--- tags:</p>\n<ul>\n<li>dart</li>\n<li>flutter</li>\n<li>animation</li>\n<p>---</p>\n</ul>\n<h5>Implicit Animation with <code>AnimatedContainer</code></h5>\n<p>Its properties can change over a specific time period. The required property of the <code>AnimatedContainer</code> widget is <code>duration</code>.  It specifies the time length of said animation. Animations are <strong>not</strong> bound to any other widget on the screen. In a class that includes a <code>mixin</code> <code>class _ShapeAnimationState extends</code> <code>State&lt;ShapeAnimation&gt; </code>with SingleTickerProviderStateMixin {`</p>\n<h5><code>mixin</code> <strong>is a class containing methods that can be used by other classes without inheriting from those other classes. Basically, we are including the class, not using it as a parent class</strong> -Simon[book]</h5>\n<figure class=\"code-block\"><pre id=\"code-block-2\" data-language=\"dart\"><code class=\"code-block language-dart\">late AnimationController contro;\nlate Animation&lt;double&gt; ani;\n\n@override\nvoid initState() {\n  super.initState();\n  contro= AnimationController(\n    duration: const Duration(seconds: 3),\n    vsync: this,\n  );\n  ani = Tween&lt;double&gt;(begin:0,end:450)\n    .animate(contro)\n    ..addListener(() {\n  \t  moveBall();\n  });\n}</code></pre></figure>\n<p>This will cause of the incrementing of a variable from 0-450 over 3 second period.</p>\n<figure class=\"code-block\"><pre id=\"code-block-3\" data-language=\"dart\"><code class=\"code-block language-dart\">void moveBall() {\n  setState(() {\n    posTop = animationTop.value;\n    posLeft = animationLeft.value;\n});\n}</code></pre></figure>\n<h6>Working from example projects animate1 &amp; 2 &amp; 3</h6>\n<p>Going beyond Linear movement is achieved by using <code>CurvedAnimation</code>.</p>\n<h6>Working from example project animate4</h6>\n<p>New functionality:</p>\n<ul>\n<li>finding the size of the space the animating object will move into.</li>\n<li>curving the trajectory</li>\n<p><code>SafeArea</code> add padding to its children to avoid OS formatting. <code>LayoutBuider</code> allows measuring of space in the current context and uses the sizing constraint of its parent.</p>\n</ul>\n<h6>Working from example project animate5</h6>\n<p>New functionality:</p>\n<ul>\n<li>continuous animation</li>\n</ul>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Animate.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Animate.html"
      ]
    },
    "Flutter_Cookbook_Simone/Async": {
      "id": "Flutter_Cookbook_Simone/Async",
      "type": "file",
      "title": "Asynchronous programming allows the app to complete time-consuming tasks (writing data to a server, retrieving web data, opening then reading/writing to a file), while running other tasks concurrently.",
      "content": "<p>--- tags: [async, flutter, dart, futures, await, parallel_programming, streams] ---</p>\n<h6>Asynchronous programming allows the app to complete time-consuming tasks (writing data to a server, retrieving web data, opening then reading/writing to a file), while running other tasks concurrently.</h6>\n<p><code>Futures</code> - single async operation (uploading data to the web) <code>Streams</code> - multiple async operations (getting GPS coordinate<strong>s</strong>) <strong>Async Operations</strong> do not stop the main line of execution, allowing for other tasks to be completed in the meantime.</p>\n<figure class=\"image-block\"><img src=\"async_exec_flow.png\" alt=\"async_exec_flow\" /></figure>\n<h1>Dart is a single-threaded language</h1>\n<p>But, still can use async patterns. Async operations for _certain_ tasks keeps one's app responsive.</p>\n<h6>Now referring the projects <code>async_books</code></h6>\n<figure class=\"code-block\"><pre id=\"code-block-4\" data-language=\"dart\"><code class=\"code-block language-dart\">          ElevatedButton(\n            child: const Text(&#x27;GO!&#x27;),\n            onPressed: () {\n              setState(() {});\n              getData().then((value) async {\n                result = value.body.toString().substring(0, 450);\n                setState(() {});\n              }).catchError((_) {\n                result = &#x27;An error occurred&#x27;;\n                setState(() {});\n              });\n            },\n          ),</code></pre></figure>\n<p>In the <code>.then()</code> callback is when the value (<code>Future&lt;Response&gt;</code>) is received. To reiterate, <strong>the <code>result</code> variable is only available in the <code>.then()</code>.</strong> &gt; [!info]+ Isolate and Event Loops &gt; <a href=\"https://www.youtube.com/watch?v=vl_AaCgudcY\" target=\"_blank\" rel=\"noopener\">Source - Flutter Youtube</a> and <a href=\"https://api.dart.dev/stable/2.3.1/dart-isolate/Isolate-class.html\" target=\"_blank\" rel=\"noopener\">Dart Docs - Isolate class</a> &gt; How does Dart simulate <code>async</code> despite being a single threaded language? The <strong>Isolate</strong>, an isolated Dart execution context. &gt; All dart code runs in a isolate. Isolates have their own private chunk of memory. Meaning, it can only access classes and values from within that same isolate. Communication between isolates is done with <code>sendPort</code> and <code>receivePort</code>. &gt; Isolates run code in its own event loop, and each event can run smaller tasks in a nested micro-task queue. Each thread is in its own isolate with its own memory and just process events. &gt; There is no shared memory between isolates. Regarding, memory allocation and garbage collection, an isolate does not require locking because there is only one thread. So, if the event loop is not busy we know the memory is being mutated. &gt; <strong>Event Loops</strong> &gt; Imagine the life cycle of an application. A whole bunch of things happen. Many clicks/taps from the user, network requests and so on... &gt; !<a href=\"app_life_time.png\">app_life_time.png</a> &gt; The app cannot predict when or in what order these events will happen in. It has to handle all of this with a single thread that never blocks. So it runs an event loop. The event loop thread processes events one at a time. All the high level abstractions of async programming (<code>Futures</code>, <code>await</code>, <code>Streams</code>, <code>async</code>) are built around this simple event loop. &gt; ``<code>dart &gt; RaisedButton( &gt; child: Text('click me'), &gt; onPressed: () { &gt; \tfinal myFuture = http.get('...'); &gt; \tmyFuture.then((response){ &gt; \t\tif(response.statusCode == 200){ &gt; \t\t\tprint('Success!'); &gt; \t} &gt; }); &gt; }, &gt; ) &gt;</code>`` &gt; Given the above button, it is rendered and then it is waiting for the button to be pressed. When the button is pressed a tap event enters the event loops queue. &gt; To recap, the button is waiting to be tapped and network request is waiting for a future, but these are just events in the queue.</p>\n<h3>Definitions</h3>\n<h4>Concurrency versus Parallelism</h4>\n<h5>Asynchronous --&gt; Concurrency</h5>\n<ul>\n<li>Allows waiting without blocking</li>\n<li>Will not create a separate thread</li>\n</ul>\n<h5>Isolates --&gt; Parallelism</h5>\n<ul>\n<li>New thread spawning</li>\n</ul>\n<h4>Using <code>async</code> and <code>await</code> to avoid <code>.then()</code> callbacks</h4>\n<ul>\n<li><code>asunc</code> is used to mark a method as asynchronous and it put before the body of the function.</li>\n<li><code>await</code> tells the framework to wait for an operation to finish and return its value.</li>\n<p>Note, <code>await</code> <strong>must</strong> be used in an <code>async</code> function and if the await call another function, then that function must be labeled as <code>async</code> too.</p>\n</ul>\n<h5>Side by side comparison</h5>\n<p><strong><code>.then()</code></strong></p>\n<figure class=\"code-block\"><pre id=\"code-block-5\" data-language=\"dart\"><code class=\"code-block language-dart\">Future&lt;Response&gt; getData(){\n\tString url = &#x27;...&#x27;\n\treturn http.get(url);\n}\nvoid someMethod(){\n\tgetData()\n\t\t.then((value) {\n\t\t\t//operate on value\n\t\t\t});\n}</code></pre></figure>\n<p><strong><code>async/await</code></strong></p>\n<figure class=\"code-block\"><pre id=\"code-block-6\" data-language=\"dart\"><code class=\"code-block language-dart\">Future&lt;Response&gt; getData(){\n\tString url = &#x27;...&#x27;\n\treturn http.get(url);\n}\nvoid someMethod() async {\n\tvar value = await getData();\n\t//operate on value\n}</code></pre></figure>\n<p><strong>Note</strong>, there is explicit method <code>catchError</code> for the <code>async/await</code> pattern, but a traditional <code>try-catch</code> will suffice.</p>\n<h3><code>Completer</code></h3>\n<p><a href=\"https://api.flutter.dev/flutter/dart-async/Completer-class.html\" target=\"_blank\" rel=\"noopener\">Source - Flutter docs</a></p>\n<h6>In flutter example project async_books_pt3</h6>\n<p>Another asynchronous technique is to use the <code>Completer</code> class. <code>Completer</code>'s create <code>Future</code> objects that can be <code>completed</code> later. This allows one to control when the <code>Future</code> is <code>completed</code>.  When a  service does not use <code>Futures</code> a <code>Completer</code> can be used. Given the button below,</p>\n<figure class=\"code-block\"><pre id=\"code-block-7\" data-language=\"dart\"><code class=\"code-block language-dart\">ElevatedButton(\n  child: const Text(&#x27;GO!&#x27;),\n  onPressed: () {\n\tgetNumber().then((value) {\n\t  setState(() {\n\t\tresult = value.toString();\n\t  });\n\t});\n  },\n),</code></pre></figure>\n<p>What is neat about <code>Completer</code> is the ability to decouple the returning of the <code>Future</code> and the executing of the computational time consuming task.</p>\n<figure class=\"code-block\"><pre id=\"code-block-8\" data-language=\"dart\"><code class=\"code-block language-dart\">late Completer completingGetNumber;\nFuture getNumber() {\n\tcompletingGetNumber = Completer&lt;int&gt;();\n\tcalculate();\n\treturn completingGetNumber.future;\n}</code></pre></figure>\n<p>See <a href=\"Computing/web_dev/Flutter/Flutter_Cookbook_Simone/Variables%23%3Ccode%3Elate%3C/code%3E\">late Variables</a> The above <strong>Sets up the Completer,</strong> which creates a <code>Completer</code> to establish a <code>Future</code> that can be resolved later. But wait, doesn't <code>calculate()</code> initiate asynchronous work? Where is the <code>await</code> prefix? This is the power of the <code>Completer</code> class. The type of <code>completingGetNumber.future</code> had to be declared (could be <code>dynamic</code>). This is how the mechanism works...</p>\n<h3>Multiple <code>Future</code>s with <code>FutureGroup</code></h3>\n<p><strong>Aside</strong>, <code>FutureGroup</code> resides in the external package <strong><code>'package:async/async.dart'</code></strong> while basic asynchronous utilities are in Dart built-in <strong><code>'dart:async'</code></strong> <code>FutureGroup</code> returns a <code>List</code> in the same order in which they were added to the group.</p>\n<ul>\n<li><code>add()</code> put a <code>Future</code> in the collection</li>\n<li><code>close()</code> no more additions to this collection</li>\n<p><strong>If any of the group members error, then the whole group will return an error</strong></p>\n</ul>\n<figure class=\"code-block\"><pre id=\"code-block-9\" data-language=\"dart\"><code class=\"code-block language-dart\">onPressed: () {\n\t\treturnFG();\n}</code></pre></figure>\n<p>Calls the following function</p>\n<figure class=\"code-block\"><pre id=\"code-block-10\" data-language=\"dart\"><code class=\"code-block language-dart\">void returnFG() {\n\tFutureGroup&lt;int&gt; futureGroup = FutureGroup&lt;int&gt;();\n\tfutureGroup.add(returnOneAsync());\n\tfutureGroup.add(returnTwoAsync());\n\tfutureGroup.add(returnThreeAsync());\n\tfutureGroup.close();\n\tfutureGroup.future.then((List&lt;int&gt; value) {\n\t  int total = 0;\n\t  for (var element in value) {\n\t\ttotal += element;\n\t  }\n\t  setState(() {\n\t\tresult = total.toString();\n\t  });\n\t});\n}</code></pre></figure>\n<h4><code>Futures</code> with <code>StatefulWidgets</code></h4>\n<h6>Now working with flutter example project geo_locate</h6>\n<p>A valid question should arise, where to place the <code>getPosition()</code> call.</p>\n<figure class=\"code-block\"><pre id=\"code-block-11\" data-language=\"dart\"><code class=\"code-block language-dart\">  Future&lt;Position&gt; getPosition() async {\n    await Geolocator.requestPermission();\n    await Geolocator.isLocationServiceEnabled();\n    Position? position = await Geolocator.getCurrentPosition();\n    return position;\n  }</code></pre></figure>\n<p>Refer to <a href=\"Interactivity%20%26%20Navigation%23%3Ccode%3EState%3C/code%3E%20Life%20Cycle\">Interactivity &amp; Navigation</a> for a review on <code>State</code> <code>initState</code> is only called once when the widget is loaded. Best practices recommend to to be keep <code>initState</code> synchronous, but a <code>.then()</code> is OK.</p>\n<h4>Letting Flutter handle <code>Future</code>s with <code>FutureBuilder</code></h4>\n<h6>Now working with flutter example project geo_locate_pt2</h6>\n<p>In the scenario of retrieving some data asynchronously and updating the user interface..There is a widget for this case. Enter <code>FutureBuilder</code>. It automatically updates content when the <code>Future</code> arrives (LOL). <code>FutureBuilder</code> build itself based off the status of said <code>Future</code> allowing the <code>setState</code> instruction to be skipped. this programming pattern is called _reactive_ as it is a way for the UI to react to the data in a <code>Future</code>. Consider the snippet below,</p>\n<figure class=\"code-block\"><pre id=\"code-block-12\" data-language=\"dart\"><code class=\"code-block language-dart\">body: Center(\n\tchild: FutureBuilder(\n\t  future: position,\n\t  builder: (BuildContext context, AsyncSnapshot&lt;Position&gt; snapshot) {\n\t\tif (snapshot.connectionState == ConnectionState.waiting) {\n\t\t  return const CircularProgressIndicator();\n\t\t} else if (snapshot.connectionState == ConnectionState.done) {\n\t\t  if (snapshot.hasError) {\n\t\t\treturn const Text(&#x27;Something terrible happened!&#x27;);\n\t\t  }\n\t\t  return Text(snapshot.data.toString());\n\t\t} else {\n\t\t  return const Text(&#x27;&#x27;);\n\t\t}\n\t  },</code></pre></figure>\n<p>From the above we can infer the <code>Future</code> is a variable called <code>position</code>. This variable is initialized at the top of the class with <code>Future&lt;Position&gt;? position;</code>.  The declaration of this variable  occurs in the <code>initState()</code> with a call to <code>getPosition()</code>. See below,</p>\n<figure class=\"code-block\"><pre id=\"code-block-13\" data-language=\"dart\"><code class=\"code-block language-dart\">  @override\n  void initState() {\n    super.initState();\n    position = getPosition();\n  }</code></pre></figure>\n<p>The <code>FutureBuilder</code>s <code>builder</code> property is given an anonymous function with parameters <code>BuildContext</code> and <code>AsyncSnapshot&lt;T&gt;</code> where <code>T</code> is said <code>Future</code>.  Checking the status of the of the <code>AsyncSnapshot</code>is done with its <code>connectionState</code> property and comparing it with the <code>enum</code> <code>ConnectionState</code>.</p>\n<h3>Asynchronous Navigation</h3>\n<h6>Using <code>Future</code>s with <code>Navigator</code>, specifically turning <code>Route</code> in to a <code>async</code> function.</h6>\n<p>The scenario, a dialogue box pops up (some new screen) and its requires user input. Said again, push a new screen to the app and <code>await</code> the route to return some data to update the screen. An example,</p>\n<ul>\n<li>simple button to launch a screen</li>\n<li>second screen has options</li>\n<li>once option is chosen the first screen will update</li>\n</ul>\n<h6>Working from example projection async_nav</h6>\n<p>The crux of this, _<code>await</code> the result of the navigation_. A button is pressed.</p>\n<figure class=\"code-block\"><pre id=\"code-block-14\" data-language=\"dart\"><code class=\"code-block language-dart\">ElevatedButton(\n\tchild: const Text(&#x27;Change Color&#x27;),\n    onPressed: () {\n\t  _navigateAndGetColor(context);\n            }),\n...\n  Future _navigateAndGetColor(BuildContext context) async {\n  color = await Navigator.push( \n  context,\n  MaterialPageRoute(builder: (context) =&gt; \n    const NavigationSecond()),\n        ) ?? Colors.blue;\n    setState(() {});\n  }</code></pre></figure>\n<p>The new screen is push on the app's stack. The return value of <code>Navigator.push</code> is assigned to the variable <code>color</code> then the screen is called to be redrawn with <code>setState</code>.</p>\n<figure class=\"image-block\"><img src=\"async_app_stack.excalidraw\" alt=\"async_app_stack\" /></figure>\n<p>The second is a <code>StatefulWidget</code> with a column full of buttons like...</p>\n<figure class=\"code-block\"><pre id=\"code-block-15\" data-language=\"dart\"><code class=\"code-block language-dart\">ElevatedButton(\n  child: const Text(&#x27;Red&#x27;),\n  onPressed: () {\n\tcolor = Colors.red.shade700;\n\tNavigator.pop(context, color);\n  })</code></pre></figure>\n<p>Given the above code, the return value of a <code>MaterialPageRoute</code> should make more sense.  Thanks <code>Navigator.pop()</code> A default value is given for <code>color</code> because the back arrow could be pressed on this page leaving no selection made.</p>\n<h4><code>await</code> a Dialogue Window</h4>\n<p>Very similar concept to the screen example above, but instead of a new screen its just a popup window.</p>\n<h6>Working from example project async_nav_pt2</h6>\n<p>Since no new page is being rendered there is no need for a <code>route</code>,  but just a <code>async</code> dialogue function that <code>await</code>s a dialogue box selection. The function below is called from within a button,</p>\n<figure class=\"code-block\"><pre id=\"code-block-16\" data-language=\"dart\"><code class=\"code-block language-dart\">_showColorDialog(BuildContext context) async {\nawait showDialog(\n  barrierDismissible: true,\n  context: context,\n  builder: (_) {\n\treturn AlertDialog(\n\t  content: const Text(&#x27;Please choose&#x27;),\n\t  actions: &lt;Widget&gt;[\n\t\tTextButton(\n\t\t\tchild: const Text(&#x27;Red&#x27;),\n\t\t\tonPressed: () {\n\t\t\t  color = Colors.red.shade700;\n\t\t\t  Navigator.pop(context, color);\n\t\t\t}),\n\t\tTextButton(...)\n\t\tTextButton(...)\n\t  ],\n\t);\n  },\n).then((result) {\n  if (result == null) {\n\tcolor = Colors.grey;\n  } else {\n\tcolor = result;\n  }\n\n  setState(() {});\n});\n}</code></pre></figure>\n<p><strong>Notice</strong>, the <code>showDialog</code> property called <code>barrierDismissible</code>. This allows user to click outside the dialog box to exit the dialog box, which causes a <code>null</code> selection to the dialog question (user input prompt).  To handle this case, the <code>.then()</code> chain is used.</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Async.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Async.html"
      ]
    },
    "Flutter_Cookbook_Simone/Basic State Management": {
      "id": "Flutter_Cookbook_Simone/Basic State Management",
      "type": "file",
      "title": "Separating the UI from the Business Logic",
      "content": "<p>--- tags: [flutter, dart, stateful, state_management] ---</p>\n<h6>Separating the UI from the Business Logic</h6>\n<h5>Model-view Separation</h5>\n<p>_Architecturally_ speaking, <strong>Models</strong> classes that deal with the data, while <strong>Views</strong> are classes that present data to the screen. A <strong>View</strong> will query a <strong>Model</strong> for meta data (size of an array).</p>\n<figure class=\"image-block\"><img src=\"plan.dart.png\" alt=\"\" /></figure>\n<p><strong>Now working with the MasterPlan project</strong> Notice how the <strong>Model</strong> is immutable.</p>\n<figure class=\"image-block\"><img src=\"plan.dart.png]] ![[task.dart.png\" alt=\"plan.dart.png]] ![[task.dart\" /></figure>\n<p>But the app seem to let the user change the text (description) and the checkbox (complete) at will.</p>\n<figure class=\"image-block\"><img src=\"plan_checkbox.png\" alt=\"plan_checkbox\" /></figure>\n<p>The State of the widgets is owned by the model. The UI will query the model for the most up to date data. The <code>onChanged</code> call back takes the new data received from the view and stores it in the model. The double dots (..) or the <strong>cascade operator</strong> allows a sequence of operations on the same object.</p>\n<figure class=\"image-block\"><img src=\"cascade_op.png\" alt=\"cascade_op\" /></figure>\n<p>The more verbose way of achieving the same result is. !<a href=\"verbose_cascade_alt.png\">verbose_cascade_alt.png</a> Aside, the <code>List.from()</code> dart method creates a new list from an existing list. A shallow copy</p>\n<h3><code>InheritedWidget</code></h3>\n<p>In contrast, <code>StatelessWidget</code> and <code>StatefulWidget</code> are widgets to configure the UI. <code>InheritedWidget</code> only passes data down to its children. This inheritance scheme is the bridge between <strong>view</strong> and <strong>model</strong> layers. <strong>Now working from example master_plan_pt2</strong> <code>InheritedWidget</code> and <code>InheritedNotifier</code> only pass data down lower in the tree.</p>\n<figure class=\"code-block\"><pre id=\"code-block-17\" data-language=\"dart\"><code class=\"code-block language-dart\">class PlanProvider extends \n\tInheritedNotifier&lt;ValueNotifier&lt;Plan&gt;&gt;</code></pre></figure>\n<p><code>PlanProvider</code> inherits from <code>InheritedNotifier</code> (<code>InheritedNotifier</code> inherits from <code>InheritedWidget</code>) and listens for objects that implement the <code>Listenable</code> interface. <code>InheritedNotifier</code> widgets are generic, so we need to specify the the type, <code>ValueNotifier&lt;Plan&gt;</code>. Whenever the <code>ValueNotifier</code> changes (the <code>Plan</code> changes) <code>notifyListeners()</code> is called to update values. Three main step to use <code>ValueNotify</code>:</p>\n<ol>\n<li><strong>create</strong></li>\n<li><strong>listen</strong></li>\n<li><strong>update</strong></li>\n<p>Step 1 - <em>create</em></p>\n</ol>\n<figure class=\"code-block\"><pre id=\"code-block-18\" data-language=\"dart\"><code class=\"code-block language-dart\">ValueNotifier&lt;Plan&gt; planNotifier = \n    PlanProvider.of(context);</code></pre></figure>\n<p>Step 2 - _listen_ By using the <code>ValueListenableBuilder</code> to automatically rebuild the UI when the value changes.</p>\n<figure class=\"image-block\"><img src=\"listenableBuilder.png\" alt=\"listenableBuilder\" /></figure>\n<p>Step 3 - _update_ To update the value of <code>ValueNotifier</code>, change the <code>value</code> property and this will trigger the <code>notifyListeners()</code> method.</p>\n<figure class=\"image-block\"><img src=\"notifierUpdate.png\" alt=\"notifierUpdate\" /></figure>\n<h5>Providers</h5>\n<p>Regarding, <code>plan_provider.dart</code> file and the static method, <code>ValueNotifier&lt;Plan&gt;</code></p>\n<figure class=\"image-block\"><img src=\"planProvider.png\" alt=\"planProvider\" /></figure>\n<p>Static methods can be invoked directly from the class name itself without creating an instance of it. A static field or method is shared by all instances of the class. <code>!</code> is the non-null assertion operator (asserts the previous expression cannot be null).</p>\n<p>--- <strong>Now starting from master_plan_pt3</strong></p>\n<h3>Making the app state visible across multiple screen</h3>\n<p>\"Lift state up\" refers to the design best practice of placing <code>State</code> objects as high as possible in the widget tree. To make the _Master Plan_ project work across multiple screens the State provider need to be \"lifted\" closer to the root.</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Basic State Management.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Basic State Management.html"
      ]
    },
    "Flutter_Cookbook_Simone/Builtins or Reserved Words": {
      "id": "Flutter_Cookbook_Simone/Builtins or Reserved Words",
      "type": "file",
      "title": "Builtins Or Reserved Words",
      "content": "<p><code>main()</code></p>\n<ul>\n<li>is auto activated</li>\n<p><code>runApp()</code></p>\n<li>UI driver function</li>\n</ul>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Builtins or Reserved Words.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Builtins or Reserved Words.html"
      ]
    },
    "Flutter_Cookbook_Simone/Connecting_Widgets.excalidraw": {
      "id": "Flutter_Cookbook_Simone/Connecting_Widgets.excalidraw",
      "type": "file",
      "title": "Text Elements",
      "content": "<p>---</p>\n<p>excalidraw-plugin: parsed tags: [excalidraw]</p>\n<p>--- ==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==</p>\n<h1>Text Elements</h1>\n<h1>Embedded files</h1>\n<p>ac68ed18d92898d0683c5421b4c9c6f4203c37c6: <a href=\"Pasted%20Image%2020230922141658_931.png\">Pasted Image 20230922141658_931.png</a> 8fdb0175f230928b31b32ca86c185846c756e928: <a href=\"Pasted%20Image%2020230922141743_951.png\">Pasted Image 20230922141743_951.png</a> b0c4d11f3e678163e89ef3591b1073e52b70ab2f: <a href=\"Pasted%20Image%2020230922141758_954.png\">Pasted Image 20230922141758_954.png</a> acc3e1892732964a6570c009155aa1d149b846a8: <a href=\"Pasted%20Image%2020230922142758_105.png\">Pasted Image 20230922142758_105.png</a> 5e6b4de1b8d1486ee1d1b358c0c940348c2b0a42: <a href=\"Pasted%20Image%2020230922142813_107.png\">Pasted Image 20230922142813_107.png</a></p>\n<p>%%</p>\n<h1>Drawing</h1>\n<figure class=\"code-block\"><pre id=\"code-block-19\" data-language=\"json\"><code class=\"code-block language-json\">{\n\t&quot;type&quot;: &quot;excalidraw&quot;,\n\t&quot;version&quot;: 2,\n\t&quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/1.9.19&quot;,\n\t&quot;elements&quot;: [\n\t\t{\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;version&quot;: 260,\n\t\t\t&quot;versionNonce&quot;: 452624468,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;TVjh3M8FBbZydjG7fvSQT&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -600.2076110272039,\n\t\t\t&quot;y&quot;: -202.9364962528157,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 368.57639129252374,\n\t\t\t&quot;height&quot;: 380.62137140012254,\n\t\t\t&quot;seed&quot;: 1451691988,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;id&quot;: &quot;QvK6RzruBKuo_ybvZoM90&quot;,\n\t\t\t\t\t&quot;type&quot;: &quot;arrow&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1695410312768,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;ac68ed18d92898d0683c5421b4c9c6f4203c37c6&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;version&quot;: 244,\n\t\t\t&quot;versionNonce&quot;: 1759568852,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;tIJ3GK0Wuixko_9boFqCV&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -175.82004625225778,\n\t\t\t&quot;y&quot;: -34.26567876645572,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 349.27810604126773,\n\t\t\t&quot;height&quot;: 528.0374996957822,\n\t\t\t&quot;seed&quot;: 849498604,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1695410303263,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;8fdb0175f230928b31b32ca86c185846c756e928&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;version&quot;: 129,\n\t\t\t&quot;versionNonce&quot;: 429135468,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;dSJJnrZJaESiuBkRHjrXE&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: 232.85814023900434,\n\t\t\t&quot;y&quot;: 253.22031024314714,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 404.89795918367344,\n\t\t\t&quot;height&quot;: 400,\n\t\t\t&quot;seed&quot;: 1893402836,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;id&quot;: &quot;tmkqsSIKwEoahRyFkUgfT&quot;,\n\t\t\t\t\t&quot;type&quot;: &quot;arrow&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1695410326917,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;b0c4d11f3e678163e89ef3591b1073e52b70ab2f&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;arrow&quot;,\n\t\t\t&quot;version&quot;: 175,\n\t\t\t&quot;versionNonce&quot;: 256715628,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;QvK6RzruBKuo_ybvZoM90&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -424.7182687750766,\n\t\t\t&quot;y&quot;: 178.1552610582969,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 249.92804902467844,\n\t\t\t&quot;height&quot;: 32.650738755968234,\n\t\t\t&quot;seed&quot;: 1612031468,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 2\n\t\t\t},\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1695410318617,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;startBinding&quot;: {\n\t\t\t\t&quot;elementId&quot;: &quot;TVjh3M8FBbZydjG7fvSQT&quot;,\n\t\t\t\t&quot;focus&quot;: 0.720661080965442,\n\t\t\t\t&quot;gap&quot;: 1\n\t\t\t},\n\t\t\t&quot;endBinding&quot;: null,\n\t\t\t&quot;lastCommittedPoint&quot;: null,\n\t\t\t&quot;startArrowhead&quot;: null,\n\t\t\t&quot;endArrowhead&quot;: &quot;arrow&quot;,\n\t\t\t&quot;points&quot;: [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t69.42347906223262,\n\t\t\t\t\t30.0239953226029\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t249.92804902467844,\n\t\t\t\t\t32.650738755968234\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;arrow&quot;,\n\t\t\t&quot;version&quot;: 327,\n\t\t\t&quot;versionNonce&quot;: 547977580,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;tmkqsSIKwEoahRyFkUgfT&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -17.339952530866938,\n\t\t\t&quot;y&quot;: 492.57933667106073,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 249.908759260622,\n\t\t\t&quot;height&quot;: 33.012313152034324,\n\t\t\t&quot;seed&quot;: 1313425108,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 2\n\t\t\t},\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1695410333931,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;startBinding&quot;: null,\n\t\t\t&quot;endBinding&quot;: {\n\t\t\t\t&quot;elementId&quot;: &quot;dSJJnrZJaESiuBkRHjrXE&quot;,\n\t\t\t\t&quot;focus&quot;: -0.3723991578450195,\n\t\t\t\t&quot;gap&quot;: 1\n\t\t\t},\n\t\t\t&quot;lastCommittedPoint&quot;: null,\n\t\t\t&quot;startArrowhead&quot;: null,\n\t\t\t&quot;endArrowhead&quot;: &quot;arrow&quot;,\n\t\t\t&quot;points&quot;: [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t69.42347906223262,\n\t\t\t\t\t30.0239953226029\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t249.908759260622,\n\t\t\t\t\t33.012313152034324\n\t\t\t\t]\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;n9jAVxWV1XFVfaHT7XRa3&quot;,\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;x&quot;: -521.0856261501268,\n\t\t\t&quot;y&quot;: 715.3581573280841,\n\t\t\t&quot;width&quot;: 326.95762244288443,\n\t\t\t&quot;height&quot;: 680.9505004882812,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 425297108,\n\t\t\t&quot;version&quot;: 68,\n\t\t\t&quot;versionNonce&quot;: 424741356,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1695410877463,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;acc3e1892732964a6570c009155aa1d149b846a8&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;GLNfbynmALUJLT6kbFaBf&quot;,\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;x&quot;: -59.39435663084603,\n\t\t\t&quot;y&quot;: 714.2710657087656,\n\t\t\t&quot;width&quot;: 328.99855641568644,\n\t\t\t&quot;height&quot;: 680.9505004882812,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 1735425772,\n\t\t\t&quot;version&quot;: 96,\n\t\t\t&quot;versionNonce&quot;: 181956332,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1695410898763,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;5e6b4de1b8d1486ee1d1b358c0c940348c2b0a42&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t}\n\t],\n\t&quot;appState&quot;: {\n\t\t&quot;theme&quot;: &quot;light&quot;,\n\t\t&quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;,\n\t\t&quot;currentItemStrokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t&quot;currentItemBackgroundColor&quot;: &quot;transparent&quot;,\n\t\t&quot;currentItemFillStyle&quot;: &quot;hachure&quot;,\n\t\t&quot;currentItemStrokeWidth&quot;: 1,\n\t\t&quot;currentItemStrokeStyle&quot;: &quot;solid&quot;,\n\t\t&quot;currentItemRoughness&quot;: 1,\n\t\t&quot;currentItemOpacity&quot;: 100,\n\t\t&quot;currentItemFontFamily&quot;: 1,\n\t\t&quot;currentItemFontSize&quot;: 20,\n\t\t&quot;currentItemTextAlign&quot;: &quot;left&quot;,\n\t\t&quot;currentItemStartArrowhead&quot;: null,\n\t\t&quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;,\n\t\t&quot;scrollX&quot;: 653.3658703264118,\n\t\t&quot;scrollY&quot;: 226.63127526690877,\n\t\t&quot;zoom&quot;: {\n\t\t\t&quot;value&quot;: 0.55\n\t\t},\n\t\t&quot;currentItemRoundness&quot;: &quot;round&quot;,\n\t\t&quot;gridSize&quot;: null,\n\t\t&quot;gridColor&quot;: {\n\t\t\t&quot;Bold&quot;: &quot;#C9C9C9FF&quot;,\n\t\t\t&quot;Regular&quot;: &quot;#EDEDEDFF&quot;\n\t\t},\n\t\t&quot;currentStrokeOptions&quot;: null,\n\t\t&quot;previousGridSize&quot;: null,\n\t\t&quot;frameRendering&quot;: {\n\t\t\t&quot;enabled&quot;: true,\n\t\t\t&quot;clip&quot;: true,\n\t\t\t&quot;name&quot;: true,\n\t\t\t&quot;outline&quot;: true\n\t\t}\n\t},\n\t&quot;files&quot;: {}\n}</code></pre></figure>\n<p>%%</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Connecting_Widgets.excalidraw.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Connecting_Widgets.excalidraw.html"
      ]
    },
    "Flutter_Cookbook_Simone/CRUD": {
      "id": "Flutter_Cookbook_Simone/CRUD",
      "type": "file",
      "title": "Create, Read, Update, and Delete",
      "content": "<p>--- tags: [CRUD, flutter, dart] ---</p>\n<h4>Create, Read, Update, and Delete</h4>\n<p>Getting data to persist, two options:</p>\n<ol>\n<li>Local</li>\n<li>Remote</li>\n<p><strong>Both</strong> require the data to be transformed in JSON first. Working with persisted is all about sending and receiving JSON. Reading data from a web service or database (our case an asset file) is usually asynchronous work. Turning <code>Map</code>s into a strongly typed object see <a href=\"The_Dart_Language%23Higher-Order%20Functions\">note: The Dart Language, section Higher-Order Functions</a>. In a world of messy JSON, one needs to guarantee they value of a JSON key is a <code>String</code> with <code>.toString()</code> then <code>T.tryParse()</code> for the _expected_ type <code>T</code> and have a default coalescing value when <code>null</code> is found. see <a href=\"The_Dart_Language%23Null-Aware%20Coalescing%20Operator\">note: The Dart Language, section Null-Aware Coalescing Operator</a>.</p>\n</ol>\n<figure class=\"code-block\"><pre id=\"code-block-20\" data-language=\"dart\"><code class=\"code-block language-dart\">Pizza.fromJson(Map&lt;String, dynamic&gt; json) { \n  id = int.tryParse(json[&#x27;id&#x27;].toString()) ?? 0;\n  pizzaName = json[&#x27;pizzaName&#x27;] != null ? json[&#x27;pizzaName&#x27;].toString() : &#x27;No name&#x27;;\n  description = (json[&#x27;description&#x27;] != null) ? json[&#x27;description&#x27;].toString() : &#x27;&#x27;;\n  price = double.tryParse(json[&#x27;price&#x27;].toString()) ?? 0; \n  imageUrl = json[&#x27;imageUrl&#x27;] ?? &#x27;&#x27;;}</code></pre></figure>\n<p>A common best practice when working with <code>String</code> is to make them of type <code>const</code>. <code>const keyId = 'id'; </code> So the <code>.fromJson</code> turns into, <code>id = int.tryParse(json[keyId].toString()) ?? 0;</code></p>\n<h3>Persisting Data - <code>SharePreferences</code></h3>\n<h6>Working example project shar_pref</h6>\n<p>A quick and dirty way to store key-value pairs on disk <a href=\"https://docs.flutter.dev/cookbook/persistence/key-value\" target=\"_blank\" rel=\"noopener\">source</a>. Writing or reading from disk should always be done asynchronously. <strong>Note</strong>, the data being persisted:</p>\n<ol>\n<li>Not encrypted</li>\n<li>Not guaranteed!</li>\n<p>My thoughts, 'never use...' Upon a stateful app starting (after state is mounted - <a href=\"https://api.flutter.dev/flutter/widgets/State-class.html\" target=\"_blank\" rel=\"noopener\">Flutter Docs</a>), <code>initState</code> is called. <code>initState</code> is called once on start up.</p>\n</ol>\n<figure class=\"code-block\"><pre id=\"code-block-21\" data-language=\"dart\"><code class=\"code-block language-dart\">@override\nvoid initState() {\n super.initState();\n readAndWritePreference();\n}\n\nFuture readAndWritePreference() async {\n  SharedPreferences prefs = await SharedPreferences.getInstance();\n  appCounter = prefs.getInt(&#x27;appCounter&#x27;) ?? 0;\n  appCounter++;\n  await prefs.setInt(&#x27;appCounter&#x27;, appCounter);\n  loadedAppCounter = prefs.getInt(&#x27;appCounter2&#x27;) ?? 0;\nsetState(() {\n  loadedAppCounter = loadedAppCounter;\n  appCounter = appCounter;\n});\n}</code></pre></figure>\n<p>The first time <code>build()</code> is called it is provided the state(context) with variables <code>loadedAppCounter</code> and <code>appCounter</code> having the values that were retrieved from the instance of <code>SharedPreferences</code>. &gt; [!info]+ <code>SharedPreference</code> API &gt; &gt;|<strong>Type</strong>|<strong>Read(get)</strong>|<strong>Write(set)</strong>| &gt; | ---- | ---- | ---- | &gt; |<code>int</code>|<code> getInt(key)</code>|<code>setInt(key, value)</code>| &gt; |<code>double</code>|<code>getDouble(key)</code>|<code>setDouble(key, value)</code>| &gt; |<code>bool</code>|<code>getBool(key)</code>|<code>setBool(key, value)</code>| &gt; |<code>String</code>|<code>getString(key)</code>|<code>setString(key, value)</code>| &gt; |<code>stringList</code>|<code>getStringList(key)</code>|<code>setStringList(key, value)</code>| &gt;</p>\n<p>An <code>onPressed</code> event triggers the below function</p>\n<figure class=\"code-block\"><pre id=\"code-block-22\" data-language=\"dart\"><code class=\"code-block language-dart\">void _incrementCounter() async {\n  setState(() {\n    _counter++;\n    loadedAppCounter++;\n  });\n  saveOtherLike();\n  }</code></pre></figure>\n<p>The member variables are incremented and then the screen is re-drawn (<code>build()</code> is called with an updated <code>context</code> variable).  The call to <code>saveOtherLike()</code> writes the newly incremented value of <code>loadedAppCounter</code> is disk.  This is done inside an <code>async</code> that returns a <code>Future</code> with two lines</p>\n<figure class=\"code-block\"><pre id=\"code-block-23\" data-language=\"dart\"><code class=\"code-block language-dart\">SharedPreferences prefs = \n\tawait SharedPreferences.getInstance();\nawait prefs.setInt(&#x27;appCounter2&#x27;, loadedAppCounter);</code></pre></figure>\n<p><strong>Notice</strong>, how the second line is just a _write_. The on disk key <code>appCounter2</code> is overwritten. If the key did not exist, it does now.</p>\n<h4><code>path_provider</code></h4>\n<h6>Working from example project path_provide</h6>\n<p>Is a library to write files to the systems directory(temporary or documents), regardless of device. For example, in the <code>initState()</code> function after the <code>super.initState()</code> call, is a good time retrieve the device's system paths. These paths are used to write and read from. Given two state variables,</p>\n<figure class=\"code-block\"><pre id=\"code-block-24\" data-language=\"dart\"><code class=\"code-block language-dart\">String documentsPath=&#x27;&#x27;;\nString tempPath=&#x27;&#x27;;</code></pre></figure>\n<p>These variables can be filled with the function call,</p>\n<figure class=\"code-block\"><pre id=\"code-block-25\" data-language=\"dart\"><code class=\"code-block language-dart\">Future getPaths() async { \n  final docDir = await \n    getApplicationDocumentsDirectory(); \n  final tempDir = await getTemporaryDirectory();\n  setState(() { \n    documentsPath = docDir.path;\n    tempPath = tempDir.path; \n }); }</code></pre></figure>\n<h1>No chrome web support</h1>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/CRUD.md",
      "aliases": [
        "Flutter_Cookbook_Simone/CRUD.html"
      ]
    },
    "Flutter_Cookbook_Simone/Everything is a Widget": {
      "id": "Flutter_Cookbook_Simone/Everything is a Widget",
      "type": "file",
      "title": "Everything Is A Widget",
      "content": "<p>Widget are classes that perform tasks on the user interface.  Every visual item inherits from the widget class. Even the screen is a widget.</p>\n<ul>\n<li><code>Text</code> widgets display text</li>\n<li><code>Padding</code> widgets adds space between widgets</li>\n<li><code>Scaffold</code> widget provides structure for a screen</li>\n<p>All widgets together form the <strong>Widget Tree</strong> (a nested tree data structure) Visual widgets come in two forms: <strong>stateless</strong> and <strong>stateful</strong> Stateless widgets are performant and <strong>immutable</strong> because there are no life cycles of states.The core of Stateless Widget the <code>build()</code> method. <code>build()</code> is called time a widget needs to be repainted (altered/changed) on the screen. When dealing with stateless widgets happens once at the start, if the device rotated and during a refresh(just like at the start) <strong>MaterialApp</strong> are the primary building block for following Google's _Material Design_ specification. Using the MaterialApp automatically implements other design standards. Regarding Material design jargon, the <code>MaterialApp</code>'s child is called a home and the <code>Scaffold</code>'s child is called a body. The below show an example with the <code>Center</code> <code>AspectRatio</code> <code>Container</code> <code>Scaffold</code> widgets.</p>\n</ul>\n<figure class=\"image-block\"><img src=\"Connecting_Widgets.excalidraw\" alt=\"Connecting_Widgets\" width=\"550\" /></figure>\n<p><code>Scaffold</code> is a <strong>platform aware widget</strong>. Meaning it will change functionality based on the user's device. Using <code>Scaffold</code> is a good habit for design consistency.</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Everything is a Widget.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Everything is a Widget.html"
      ]
    },
    "Flutter_Cookbook_Simone/Interactivity & Navigation": {
      "id": "Flutter_Cookbook_Simone/Interactivity & Navigation",
      "type": "file",
      "title": "`State` Life Cycle",
      "content": "<p>--- tags: dart, flutter, ui, ux, stateful --- _User Interface_ is all the elements on the screen (images, colors, panels, text, etc) and the _User Experience_ is what happens when the user's interact with the interface. \"UI is the what and UX is the how\" A stateful widget is divided into two classes: the widget and its state. Every stateful widget has a state object to help manage its life cycle (a completely separate class). As a design point, <code>StatefulWidgets</code> are of the few scenarios where two classes (the widget and the widget's state) should be in the same file. In <code>StatefulWidgets</code>, you put the <code>build</code> method in the <code>State</code> class, not in the widget</p>\n<figure class=\"image-block\"><img src=\"setState.png\" alt=\"setState\" /></figure>\n<p>Remember, <code>StatefulWidgets</code> are made up of two classes: __the widget__ and __its state__. The widget part of the <code>StatefulWidget</code> does not usually do much because the data that changes is placed in the <code>State</code> class. <strong>All widgets are immutable</strong>, but the <code>State</code> object is mutable. The <code>State</code> object is responsible for the <code>build</code> method. _Jargon_, \"dirty state\" means the in the next frame it will repaint. The <code>setState</code> function tells Flutter that a widget needs to be repainted. Every time <code>setState</code> is called the <code>build</code> method is called. Never call <code>build</code> directly, rather do it through <code>setState</code>. The following diagram summarizes how Flutter's render loop is impacted by <code>setState</code></p>\n<figure class=\"image-block\"><img src=\"render_loop.png\" alt=\"render_loop\" /></figure>\n<p>__Note__, that complex operations should not be performed in the <code>setState</code> function, but just the final value assignment.</p>\n<h4><code>State</code> Life Cycle</h4>\n<p>Unlike <code>StatelessWidget</code>,  which has nothing more than a <code>build</code> method. <code>StatefulWidgets</code> have a life cycle of methods that are called in a specific order:</p>\n<ul>\n<li><code>initState</code></li>\n<li><code>didChangeDependencies</code></li>\n<li><code>didUpdateWidget</code></li>\n<li><code>build</code> <strong>(required)</strong></li>\n<li><code>reassemble</code></li>\n<li><code>deactivate</code></li>\n<li><code>dispose</code></li>\n<p>&gt; [!flut]- <code>initState</code> &gt; - used to initialize any non-final state in the class &gt; - _kinda like a constructor_ &gt; - This method is called __after__ the constructor but __before__ it is added to the widget tree.</p>\n<p>&gt; [!flut]- <code>didChangeDependencies</code> &gt; - this method is called after <code>initState</code>, but has access to the <code>BuildContext</code> &gt; - Useful for any set up work that requires <code>context</code></p>\n<p>&gt; [!flut]- <code>build</code> &gt; - __required__ &gt; - Identical to the <code>StatelessWidget</code> version &gt; - This defines and returns the widget's tree (creating the UI)</p>\n<p>&gt; [!flut]- <code>dispose</code> &gt; - The cleanup method &gt; - Called when the <code>State</code> object is removed from the widget tree &gt; - One must explicitly release finished resources</p>\n</ul>\n<h4>Buttons</h4>\n<p>Flutter has several aesthetically different buttons</p>\n<ul>\n<li><code>ElevatedButton</code></li>\n<li><code>TextButton</code></li>\n<li><code>IconButton</code></li>\n<li><code>FloatingActionButton</code></li>\n<li><code>OutlinedButton</code></li>\n<li><code>DropDownButton</code></li>\n<li><code>CupertinoButton</code></li>\n</ul>\n<h4>Scrolling</h4>\n<p><code>ListView</code> has scrolling builtin by default when its widgets extend past the screen. A scrolling widget needs to know their parent’s constraints to activate scrolling, putting scroll widgets inside widgets with unbounded constraints can cause Flutter to throw errors.</p>\n<h5>Constraints go down -&gt; Sizes go up</h5>\n<p>More in <a href=\"Layout\">Layout</a> In Flutter there’s a rule: “Constraints go down. Sizes go up.”. This means that:</p>\n<ul>\n<li>Parent widgets pass down constraints to their children. Constraints are passed in a <code>BoxContraints</code> object, that includes minimum and maximum values for the width and height of the children.</li>\n<li>Children widgets determine their size and then pass the information back up to the parent widget</li>\n<p>If you place a scrolling widget inside a <code>Flex</code> widget (like <code>Row</code> or <code>Column</code>), which is pretty common, just don’t forget to always wrap the scrolling content in <code>Expanded</code> or <code>Flexible</code> first. This error means that you have an unbounded scrolling widget</p>\n</ul>\n<figure class=\"image-block\"><img src=\"unbounded_scroll_error.png\" alt=\"unbounded_scroll_error\" /></figure>\n<h3>Handling Large Datasets with <code>ListView</code> (Scrolling)</h3>\n<p>The problem is handling large amount of data in a scrolling widget. We know only a certain amounts of views (widgets that hold data) fit on any screen at once. The trick is to, recycling views with new data instead of creating new views. The <code>itemCount</code> property to the <code>ListView.builder()</code> lets Flutter know how long the list is. duh! The <code>itemBuilder</code> property and its value (a closure) help with performance to limit the creation of <code>Elements</code> and <code>RenderObjects</code>. <code>itemBuilder</code> is using <em>deferred rendering</em> to create only what it needs and manage a subset of the total widgets. The _scroll tree_ is limited to only what is needed. Flutter will continuously call <code>itemBuilder</code> with an updated index as the user scrolls. Assuming the size of the viewport is constant, the programmer only manages the fixed number of visible entries.</p>\n<figure class=\"image-block\"><img src=\"scrollViewPort.png\" alt=\"scrollViewPort\" /></figure>\n<p><code>itemExtent</code> property is a way to supply a fixed height to all the items in <code>ListView</code>. Instead of letting the widget figure out its own height based on the content, using <code>itemExtent</code> will enforce a fixed height and leads to performance benefits. <code>ScrollController</code> object allows programmers to interact with a <code>ListView</code> from outside the build methods.</p>\n<figure class=\"code-block\"><pre id=\"code-block-26\" data-language=\"dart\"><code class=\"code-block language-dart\">scrollController.animateTo(\n  itemHeight * laps.length,\n  duration: Duration(milliseconds: 500),\n  curve: Curves.easeIn,\n);</code></pre></figure>\n<p><code>itemHeight * laps.length,</code> this argument dictates where to scroll to. Since, there we set items to have a fixed height we can calculate how far to automatically scroll.</p>\n<p><code>duration: Duration(milliseconds: 500),</code> dictates how long it will take to scroll to the calculated position.</p>\n<p><code>curve: Curves.easeIn,</code> how (animate) to get there</p>\n<h3>Working with <code>TextField</code>s</h3>\n<p><code>TextField</code> has a subclass called <code>TextFormField</code> for text fields that interact with each other. <code>TextField</code>s are platform aware widgets. <code>validator</code> on failure will return a string and on success return <code>null</code>. <code>Form</code> widget can wrap many <code>TextFields</code> and is a non-rendering widget. <code>Form</code> can contain non-<code>TextFields</code>, but keeps track which ones <code>null</code>(valid). If all validator functions wrapped in <code>Form</code> return <code>null</code> then the entire <code>Form</code> is valid. <code>GlobalKey</code> used to get access to the form’s state class from outside the <code>build</code> method. <code>GlobalKey</code>'s uniquely identify elements. While <code>BuildContext</code> is an object that can find <strong>parents</strong>  in the widget tree, <code>GlobalKey</code>'s are objects that you use to retrieve a <strong>child</strong> widget tree. (_GlobalKey is a complex topic. This is a brief, crude intro_). In short, with the key, you can retrieve the Form’s state. The <code>FormState</code> class has a public method called <code>validate</code> that will call the validator on all its children.</p>\n<h3>Navigating to the next screen</h3>\n<p><strong>Now working from stopwatch part 2 project</strong> Within <code>MaterialApp</code> a class called <code>Navigator</code> manages screens. The <code>Navigator</code> class abstracts screens to the concept of <code>Routes</code>. Regarding a login event, once a use logs successfully the back button to return to the login screen should be inaccessible.</p>\n<figure class=\"code-block\"><pre id=\"code-block-27\" data-language=\"dart\"><code class=\"code-block language-dart\">Navigator.of(context).pushReplacement( \n\tMaterialPageRoute( \n\t\tbuilder: (_) =&gt; \n\t\t\tStopWatch(name: name, email: email), ), );</code></pre></figure>\n<p><code>Navigator</code>'s function as a stack. <code>Routes</code> can be pushed onto and popped off of.The above snippet will remove the <code>Route</code> (screen) from the <code>Navigator</code> stack. <code>pushNamed</code> does pop then push of the current stack</p>\n<h3>Presenting Bottom Sheet</h3>\n<p><strong>Now working from stopwatch part 3 project</strong> A bottom sheet is like a footer that be animated. It can temporarily or permanently appear after an event. The app's widget looks like.</p>\n<figure class=\"image-block\"><img src=\"widgetTree.png\" alt=\"widgetTree\" /></figure>\n<p>Bottom sheets are partial routes. They use the closest <code>Scaffold</code> by using the <code>of-context</code> to find it. The above graphic shows the <code>BuildContext</code> we do <strong>not</strong> want. The error message <code>No Scaffold Widget found</code> will be triggered when the nearest <code>Scaffold</code> is too far up in the tree to be used. The solution is to use a <code>BuildContext</code> lower in the tree. Wrapping the button (that uses the bottom sheet) in the <code>Builder</code> widget will solve this.</p>\n<figure class=\"image-block\"><img src=\"bottomSheetBuilder.png\" alt=\"bottomSheetBuilder\" /></figure>\n<p>The above snippet demonstrate how to create a <code>BuildContext</code> closer to the button.</p>\n<figure class=\"image-block\"><img src=\"widgetTreeWithBuilder.png\" alt=\"widgetTreeWithBuilder\" /></figure>\n<h6>Persistent controllers</h6>\n<figure class=\"image-block\"><img src=\"bottomSheetController.png\" alt=\"bottomSheetController\" /></figure>\n<p>The <code>showBottomSheet</code> method returns a <strong>persistent controller</strong> used to manipulate them.</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Interactivity & Navigation.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Interactivity & Navigation.html"
      ]
    },
    "Flutter_Cookbook_Simone/Layout": {
      "id": "Flutter_Cookbook_Simone/Layout",
      "type": "file",
      "title": "Important Layout details",
      "content": "<p>--- tags: [flutter, layout, ui, ] ---</p>\n<h1>Important Layout details</h1>\n<p><a href=\"Interactivity%20%26%20Navigation%23Scrolling%23Constraints%20go%20down%20-%3E%20Sizes%20go%20up\">Constraints Got Down -&gt; Sizes Go Up</a></p>\n<h2>Article Highlights:</h2>\n<ul>\n<li>A widget gets its own <strong>constraints</strong> from its <strong>parent</strong>. A _constraint_ is just a set of 4 doubles: a minimum and maximum width, and a minimum and maximum height.</li>\n<li>Then the widget goes through its own list of <strong>children</strong>. One by one, the widget tells its children what their <strong>constraints</strong> are (which can be different for each child), and then asks each child what size it wants to be.</li>\n<li>Then, the widget positions its <strong>children</strong> (horizontally in the <code>x</code> axis, and vertically in the <code>y</code> axis), one by one.</li>\n<li>And, finally, the widget tells its parent about its own <strong>size</strong> (within the original constraints, of course).</li>\n<p>Flutter’s layout engine is designed to be a one-pass process. This means that Flutter lays out its widgets very efficiently, but does result in a few limitations:</p>\n<li>A widget can decide its own size only within the constraints given to it by its parent. This means a widget usually <strong>can’t have any size it wants</strong>.</li>\n<li>A widget <strong>can’t know and doesn’t decide its own position in the screen</strong>, since it’s the widget’s parent who decides the position of the widget.</li>\n<li>Since the parent’s size and position, in its turn, also depends on its own parent, it’s impossible to precisely define the size and position of any widget without taking into consideration the tree as a whole.</li>\n<li>If a child wants a different size from its parent and the parent doesn’t have enough information to align it, then the child’s size might be ignored. <strong>Be specific when defining alignment.</strong></li>\n<p>Constraints go down. Sizes go up. Positions are set by parents Positions are set by parents Sizes go up Constraints go down</p>\n<p>Same article two different sources <a href=\"https://medium.com/flutter-community/flutter-the-advanced-layout-rule-even-beginners-must-know-edc9516d1a2\" target=\"_blank\" rel=\"noopener\">Source - 'The Advanced Layout Rule Even Beginners Must Know'</a> <a href=\"https://medium.com/flutter-community/flutter-the-advanced-layout-rule-even-beginners-must-know-edc9516d1a2\" target=\"_blank\" rel=\"noopener\">Source - 'Understanding Constraints'</a></p>\n</ul>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Layout.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Layout.html"
      ]
    },
    "Flutter_Cookbook_Simone/Mastering The Widget Tree": {
      "id": "Flutter_Cookbook_Simone/Mastering The Widget Tree",
      "type": "file",
      "title": "Row and Column Widgets",
      "content": "<p>--- tags:</p>\n<ul>\n<li>flutter</li>\n<li>dart</li>\n<li>layout</li>\n<li>assets</li>\n<li>widget_tree</li>\n<p>---</p>\n</ul>\n<h3>Row and Column Widgets</h3>\n<ul>\n<li>A <code>Row</code> can be inserted into a <code>Column</code> and vice versa</li>\n<p>Both have the properties <code>CrossAxisAlignment</code> and <code>MainAxisAlignment</code></p>\n<li>both these properties are abstractions of _x y_ axis and tweaking these values will alter the layout. Notice, the <code>MainAxisAligment</code> for <code>Column</code> widgets is vertically down and <code>Row</code> is horizontal across. Vice versa for the <code>CrossAxisAlignment</code> parameter.</li>\n</ul>\n<figure class=\"image-block\"><img src=\"row_column_axis.png\" alt=\"row_column_axis\" width=\"300\" /></figure>\n<p><em>the only real difference between is their default orientation axis they start laying out children</em></p>\n<h3>Stack Widget</h3>\n<ul>\n<li>expects the use of <code>Align</code>, <code>Transform</code>, and <code>Positioned</code> to form the layout.</li>\n<p><em>Note</em> use <code>SizedBox</code> over <code>Container</code> in _most_ cases The developer tools in the browser has a show guide lines options to draw rendering reference lines.</p>\n</ul>\n<h5>Flexible Interfaces account for myriad device layouts</h5>\n<h5>Developing Proportional Widgets with Flexible and Expanded Widgets</h5>\n<h3>Styling</h3>\n<p>The <code>ThemeData</code> is a normal class that stores themes and sub-themes. <code>Theme.of.(context)</code> is an inherited widget meaning, all the descendants of the <code>Theme</code> widget get its defined theme(style). Each widget travels up the widget tree until a <code>Theme</code> widget is found.</p>\n<figure class=\"image-block\"><img src=\"findThemeData.png\" alt=\"findThemeData\" width=\"390\" /></figure>\n<p>_Can be used like..._ <code>color: Theme.of(context).cardColor,</code> <code>style: Theme.of(context).textTheme.headlineMedium,</code> `style: Theme.of(context).textTheme.headlineMedium,</p>\n<figure class=\"code-block\"><pre id=\"code-block-28\" data-language=\"dart\"><code class=\"code-block language-dart\">color: selected\n  ? null\n  : Theme.of(context)\n\t  .textTheme\n\t  .titleMedium\n\t  ?.color\n\t  ?.withOpacity(0.5),</code></pre></figure>\n<p>The variable <code>context</code> of type <code>BuildContext</code> is the only object that is aware of the underlying widget tree. Many widgets are _theme aware_, meaning, by default the widget references it's parent theme properties.</p>\n<p>Flutter places assets into a special archive called the _asset bundle_ that apps read from at runtime</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Mastering The Widget Tree.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Mastering The Widget Tree.html"
      ]
    },
    "Flutter_Cookbook_Simone/Project Setup": {
      "id": "Flutter_Cookbook_Simone/Project Setup",
      "type": "file",
      "title": "Create Project at Command line",
      "content": "<p>--- tags: [create_project,flutter_command_line, flutter_build_project, compile, recompile, hot_reload, folder_structure, dart, flutter] ---</p>\n<h3>Create Project at Command line</h3>\n<p><code>$ flutter create hello_flutter</code> When developing with no internet access use <code>$ flutter create --offline hello_flutter</code> For command line help by command</p>\n<figure class=\"code-block\"><pre id=\"code-block-29\" data-language=\"shell\"><code class=\"code-block language-shell\">$ flutter &lt;command&gt; --help\n$ flutter create --help</code></pre></figure>\n<h6>Once a project is created there are several 'targets'</h6>\n<ul>\n<li>Connecting a device to your computer</li>\n<li>Starting a simulator/emulator</li>\n<li>running the app on a web browser</li>\n<li>running the app on your desktop</li>\n</ul>\n<h6>Emulator versus Device</h6>\n<p><strong>Devices</strong> run in the developments native environment <strong>Emulators</strong> simulate alien environments On my MacBook, iOS and Android need to emulated, while devices are macOS desktop applications and Chrome applications are native</p>\n<h5>Run Application in Chrome</h5>\n<p><code>$ flutter run -d chrome</code></p>\n<h4>Configure for Web Deployment</h4>\n<p><code>$ flutter build web</code></p>\n<h6>Language choice</h6>\n<p>iOS went from Objective C to Swift Android went from Java to Kotlin</p>\n<h6>Folder Structure</h6>\n<p><code>android</code>, <code>ios</code>, <code>linux</code>, <code>web</code>, and <code>windows</code> folders are created from the from the <code>flutter create project_name</code> command. The <code>ios</code> and <code>android</code> folder be opened in Xcode and Android Studio, respectively, and will run like normal native apps</p>\n<h4>Build</h4>\n<p>Dart and Flutter support both Just-in-Time (JIT) and Ahead-of-Time (AOT) compilation.</p>\n<h6>JIT</h6>\n<ul>\n<li>compile the source code of the app and translate into machine code <em>during execution</em></li>\n<li>makes for faster development/testing because the code can be recompiled while the app is running</li>\n</ul>\n<h6>AOT</h6>\n<ul>\n<li>code is compiled before program execution</li>\n<li>this builds a machine code executable that can run the target machine and lead to better performance</li>\n</ul>\n<h6>Flutter uses JIT for debug builds and AOT for release builds</h6>\n<p>All artifacts from the compilation process are placed in the <code>build</code> folder. Add this folder to the <code>.gitignore</code></p>\n<h6>Hot Reload - Refreshing without recompiling</h6>\n<p>This is called a stateful hot reload, which is that Flutter can inject new code into your app while it is running without loosing your position (__state__) in your app</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Project Setup.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Project Setup.html"
      ]
    },
    "Flutter_Cookbook_Simone/Stream_controller.excalidraw": {
      "id": "Flutter_Cookbook_Simone/Stream_controller.excalidraw",
      "type": "file",
      "title": "Text Elements",
      "content": "<p>---</p>\n<p>excalidraw-plugin: parsed tags: [excalidraw]</p>\n<p>--- ==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==</p>\n<h1>Text Elements</h1>\n<p>Boiler Plate application setup ^ZlzN7T3O</p>\n<p>Given random number, add to the sink ^U8UMyNxG</p>\n<p>setState triggers a new build ^ASV4gcoB</p>\n<p>Create a stream with a sink just for integers ^NHNeg7DG</p>\n<p>Initiate integer stream with sink.  ^92I964gg</p>\n<p>Handle what is emitted from the stream. ^pp31aOX3</p>\n<p>Generate random number and toss into sink ^fnmlmKee</p>\n<p>Adding new data into sink ^cwz2XuCw</p>\n<h1>Embedded files</h1>\n<p>b77a54c2c7a709e183db485a5607d21ec32905b8: <a href=\"NumbStream.png\">NumbStream.png</a> d6801bffb699c94cdbe27b3346d6d9c176d1f18f: <a href=\"appBoilerPlate.png\">appBoilerPlate.png</a> 88af077962d2c531f0d05da259300bdc6933b06a: <a href=\"stateMemVar.png\">stateMemVar.png</a> f653ecc9377442bae3e9aa007791ec504db915fa: <a href=\"build.png\">build.png</a></p>\n<p>%%</p>\n<h1>Drawing</h1>\n<figure class=\"code-block\"><pre id=\"code-block-30\" data-language=\"json\"><code class=\"code-block language-json\">{\n\t&quot;type&quot;: &quot;excalidraw&quot;,\n\t&quot;version&quot;: 2,\n\t&quot;source&quot;: &quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.20&quot;,\n\t&quot;elements&quot;: [\n\t\t{\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;version&quot;: 898,\n\t\t\t&quot;versionNonce&quot;: 533920288,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;Ud1KbqCm&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;hachure&quot;,\n\t\t\t&quot;strokeWidth&quot;: 1,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -1270.3523893692786,\n\t\t\t&quot;y&quot;: 460.44228874989517,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 535.5640469738543,\n\t\t\t&quot;height&quot;: 677.4029269943271,\n\t\t\t&quot;seed&quot;: 76781,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1709741355691,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;88af077962d2c531f0d05da259300bdc6933b06a&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;version&quot;: 724,\n\t\t\t&quot;versionNonce&quot;: 302016480,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;QBJ3436bblhMTIloJrmZ2&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -1261.4250374077633,\n\t\t\t&quot;y&quot;: 1161.8113609206487,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 521.950044883234,\n\t\t\t&quot;height&quot;: 457.6000393496846,\n\t\t\t&quot;seed&quot;: 1240790266,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1709741337773,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;f653ecc9377442bae3e9aa007791ec504db915fa&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;version&quot;: 266,\n\t\t\t&quot;versionNonce&quot;: 368200672,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;zFugvB0N3AsHsODXQ_nbW&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -1249.4738193683384,\n\t\t\t&quot;y&quot;: -341.86928658236184,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 461.947242206235,\n\t\t\t&quot;height&quot;: 398,\n\t\t\t&quot;seed&quot;: 963890426,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1709741394799,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;d6801bffb699c94cdbe27b3346d6d9c176d1f18f&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;version&quot;: 517,\n\t\t\t&quot;versionNonce&quot;: 417490464,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;BT_wLGwAfzHtRZDte1SHp&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -1063.1843695652794,\n\t\t\t&quot;y&quot;: -333.7986605623481,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 272.3669917699502,\n\t\t\t&quot;height&quot;: 33,\n\t\t\t&quot;seed&quot;: 961884218,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;ZlzN7T3O&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741424647,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;version&quot;: 487,\n\t\t\t&quot;versionNonce&quot;: 938517024,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;ZlzN7T3O&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -1055.9706002428043,\n\t\t\t&quot;y&quot;: -328.7986605623481,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 257.939453125,\n\t\t\t&quot;height&quot;: 23,\n\t\t\t&quot;seed&quot;: 1262084346,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1709741424647,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;fontSize&quot;: 20,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;text&quot;: &quot;Boiler Plate application setup&quot;,\n\t\t\t&quot;rawText&quot;: &quot;Boiler Plate application setup&quot;,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;containerId&quot;: &quot;BT_wLGwAfzHtRZDte1SHp&quot;,\n\t\t\t&quot;originalText&quot;: &quot;Boiler Plate application setup&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15,\n\t\t\t&quot;baseline&quot;: 19\n\t\t},\n\t\t{\n\t\t\t&quot;type&quot;: &quot;image&quot;,\n\t\t\t&quot;version&quot;: 722,\n\t\t\t&quot;versionNonce&quot;: 619293216,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;id&quot;: &quot;tVarJ1USCeh8aTychcam7&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;x&quot;: -1290.017754449706,\n\t\t\t&quot;y&quot;: 135.06676607875414,\n\t\t\t&quot;strokeColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;width&quot;: 564.8385306551128,\n\t\t\t&quot;height&quot;: 297.57894756183873,\n\t\t\t&quot;seed&quot;: 452980858,\n\t\t\t&quot;groupIds&quot;: [\n\t\t\t\t&quot;ds8IsKor13fY4dvqX9Pq7&quot;\n\t\t\t],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;boundElements&quot;: [],\n\t\t\t&quot;updated&quot;: 1709741362978,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;status&quot;: &quot;pending&quot;,\n\t\t\t&quot;fileId&quot;: &quot;b77a54c2c7a709e183db485a5607d21ec32905b8&quot;,\n\t\t\t&quot;scale&quot;: [\n\t\t\t\t1,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;Q10lFIRdxYpCO1DHhC4E5&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -978.687581719306,\n\t\t\t&quot;y&quot;: 283.1558634734354,\n\t\t\t&quot;width&quot;: 233.99910762392255,\n\t\t\t&quot;height&quot;: 56,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [\n\t\t\t\t&quot;ds8IsKor13fY4dvqX9Pq7&quot;\n\t\t\t],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 2136698400,\n\t\t\t&quot;version&quot;: 798,\n\t\t\t&quot;versionNonce&quot;: 1248814624,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;U8UMyNxG&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741362978,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;U8UMyNxG&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -963.4116607198447,\n\t\t\t&quot;y&quot;: 288.1558634734354,\n\t\t\t&quot;width&quot;: 203.447265625,\n\t\t\t&quot;height&quot;: 46,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [\n\t\t\t\t&quot;ds8IsKor13fY4dvqX9Pq7&quot;\n\t\t\t],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 1717637088,\n\t\t\t&quot;version&quot;: 573,\n\t\t\t&quot;versionNonce&quot;: 803054112,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741362978,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;Given random number,\\nadd to the sink&quot;,\n\t\t\t&quot;rawText&quot;: &quot;Given random number, add to the sink&quot;,\n\t\t\t&quot;fontSize&quot;: 20,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;baseline&quot;: 42,\n\t\t\t&quot;containerId&quot;: &quot;Q10lFIRdxYpCO1DHhC4E5&quot;,\n\t\t\t&quot;originalText&quot;: &quot;Given random number, add to the sink&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;15uYPdgb_eZdbfMwaLCQ6&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -1231.1440159505878,\n\t\t\t&quot;y&quot;: 99.77189370008193,\n\t\t\t&quot;width&quot;: 420.6268310546876,\n\t\t\t&quot;height&quot;: 33,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 1369722848,\n\t\t\t&quot;version&quot;: 333,\n\t\t\t&quot;versionNonce&quot;: 555877920,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;NHNeg7DG&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741433918,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;NHNeg7DG&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -1213.130405110744,\n\t\t\t&quot;y&quot;: 104.77189370008193,\n\t\t\t&quot;width&quot;: 384.599609375,\n\t\t\t&quot;height&quot;: 23,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 1548702688,\n\t\t\t&quot;version&quot;: 388,\n\t\t\t&quot;versionNonce&quot;: 1609501664,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741446062,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;Create a stream with a sink just for integers&quot;,\n\t\t\t&quot;rawText&quot;: &quot;Create a stream with a sink just for integers&quot;,\n\t\t\t&quot;fontSize&quot;: 20,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;baseline&quot;: 19,\n\t\t\t&quot;containerId&quot;: &quot;15uYPdgb_eZdbfMwaLCQ6&quot;,\n\t\t\t&quot;originalText&quot;: &quot;Create a stream with a sink just for integers&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;VsAP9i2zv3sU6i-xCGKlF&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -954.4866820985941,\n\t\t\t&quot;y&quot;: 592.4762867937634,\n\t\t\t&quot;width&quot;: 205.48541876382282,\n\t\t\t&quot;height&quot;: 70.06415326315992,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 1773274656,\n\t\t\t&quot;version&quot;: 1273,\n\t\t\t&quot;versionNonce&quot;: 1001305632,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;92I964gg&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741355691,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;92I964gg&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -934.8829969995304,\n\t\t\t&quot;y&quot;: 601.8182897281771,\n\t\t\t&quot;width&quot;: 166.27804856569534,\n\t\t\t&quot;height&quot;: 51.38014739433251,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 231490080,\n\t\t\t&quot;version&quot;: 1521,\n\t\t\t&quot;versionNonce&quot;: 1555231264,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741355691,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;Initiate integer\\nstream with sink.&quot;,\n\t\t\t&quot;rawText&quot;: &quot;Initiate integer stream with sink. &quot;,\n\t\t\t&quot;fontSize&quot;: 22.339194519275004,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;baseline&quot;: 46,\n\t\t\t&quot;containerId&quot;: &quot;VsAP9i2zv3sU6i-xCGKlF&quot;,\n\t\t\t&quot;originalText&quot;: &quot;Initiate integer stream with sink. &quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;_ctC4Tn-kF3ht_6jZzw1o&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -999.3463227009472,\n\t\t\t&quot;y&quot;: 724.281026614261,\n\t\t\t&quot;width&quot;: 246.42327841158036,\n\t\t\t&quot;height&quot;: 82.73497587182597,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 1684350944,\n\t\t\t&quot;version&quot;: 1511,\n\t\t\t&quot;versionNonce&quot;: 1238347296,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;pp31aOX3&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741355691,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;pp31aOX3&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -989.0838285285705,\n\t\t\t&quot;y&quot;: 739.9584408530077,\n\t\t\t&quot;width&quot;: 225.89829006682686,\n\t\t\t&quot;height&quot;: 51.38014739433251,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 288697312,\n\t\t\t&quot;version&quot;: 1801,\n\t\t\t&quot;versionNonce&quot;: 1811212832,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741355691,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;Handle what is emitted\\nfrom the stream.&quot;,\n\t\t\t&quot;rawText&quot;: &quot;Handle what is emitted from the stream.&quot;,\n\t\t\t&quot;fontSize&quot;: 22.339194519275004,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;baseline&quot;: 46,\n\t\t\t&quot;containerId&quot;: &quot;_ctC4Tn-kF3ht_6jZzw1o&quot;,\n\t\t\t&quot;originalText&quot;: &quot;Handle what is emitted from the stream.&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;QdeqPPAXVicOA7CSF0J9U&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -991.0121837092217,\n\t\t\t&quot;y&quot;: 977.2343413276526,\n\t\t\t&quot;width&quot;: 246.42327841158036,\n\t\t\t&quot;height&quot;: 88.23981835113626,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 1791370784,\n\t\t\t&quot;version&quot;: 1599,\n\t\t\t&quot;versionNonce&quot;: 236103200,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;fnmlmKee&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741355691,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;fnmlmKee&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -972.0705276976795,\n\t\t\t&quot;y&quot;: 982.8191399574714,\n\t\t\t&quot;width&quot;: 208.5399663884959,\n\t\t\t&quot;height&quot;: 77.07022109149877,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 391930400,\n\t\t\t&quot;version&quot;: 1938,\n\t\t\t&quot;versionNonce&quot;: 488170016,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741355691,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;Generate random\\nnumber and toss into\\nsink&quot;,\n\t\t\t&quot;rawText&quot;: &quot;Generate random number and toss into sink&quot;,\n\t\t\t&quot;fontSize&quot;: 22.339194519275004,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;baseline&quot;: 71,\n\t\t\t&quot;containerId&quot;: &quot;QdeqPPAXVicOA7CSF0J9U&quot;,\n\t\t\t&quot;originalText&quot;: &quot;Generate random number and toss into sink&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;5HmXhwOjiuPKEW-n_m8q0&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -812.3290477250191,\n\t\t\t&quot;y&quot;: 1459.117970429611,\n\t\t\t&quot;width&quot;: 230.0646730324508,\n\t\t\t&quot;height&quot;: 32.13988129475179,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 895798240,\n\t\t\t&quot;version&quot;: 2267,\n\t\t\t&quot;versionNonce&quot;: 1518503456,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;cwz2XuCw&quot;\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t&quot;id&quot;: &quot;r-j6qiw6BLHYXE0nZSTY0&quot;,\n\t\t\t\t\t&quot;type&quot;: &quot;arrow&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741337773,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;cwz2XuCw&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -800.4310725563089,\n\t\t\t&quot;y&quot;: 1464.776400235025,\n\t\t\t&quot;width&quot;: 206.26872269503048,\n\t\t\t&quot;height&quot;: 20.823021683923695,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 1788891104,\n\t\t\t&quot;version&quot;: 2603,\n\t\t\t&quot;versionNonce&quot;: 798669344,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741337773,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;Adding new data into sink&quot;,\n\t\t\t&quot;rawText&quot;: &quot;Adding new data into sink&quot;,\n\t\t\t&quot;fontSize&quot;: 18.106975377324954,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;baseline&quot;: 17,\n\t\t\t&quot;containerId&quot;: &quot;5HmXhwOjiuPKEW-n_m8q0&quot;,\n\t\t\t&quot;originalText&quot;: &quot;Adding new data into sink&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;r-j6qiw6BLHYXE0nZSTY0&quot;,\n\t\t\t&quot;type&quot;: &quot;arrow&quot;,\n\t\t\t&quot;x&quot;: -816.3808036774327,\n\t\t\t&quot;y&quot;: 1474.8900498646565,\n\t\t\t&quot;width&quot;: 17.653349013621902,\n\t\t\t&quot;height&quot;: 0.673541445571036,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 0,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 2\n\t\t\t},\n\t\t\t&quot;seed&quot;: 340151840,\n\t\t\t&quot;version&quot;: 506,\n\t\t\t&quot;versionNonce&quot;: 972512800,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741337775,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;points&quot;: [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17.653349013621902,\n\t\t\t\t\t0.673541445571036\n\t\t\t\t]\n\t\t\t],\n\t\t\t&quot;lastCommittedPoint&quot;: null,\n\t\t\t&quot;startBinding&quot;: {\n\t\t\t\t&quot;elementId&quot;: &quot;5HmXhwOjiuPKEW-n_m8q0&quot;,\n\t\t\t\t&quot;focus&quot;: 0.23663913005968282,\n\t\t\t\t&quot;gap&quot;: 4.0517559524136\n\t\t\t},\n\t\t\t&quot;endBinding&quot;: null,\n\t\t\t&quot;startArrowhead&quot;: null,\n\t\t\t&quot;endArrowhead&quot;: &quot;arrow&quot;\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;frU3utNp5Mo_PQr6BiOzv&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -888.662601399089,\n\t\t\t&quot;y&quot;: 1408.2076835396804,\n\t\t\t&quot;width&quot;: 250.8279472093751,\n\t\t\t&quot;height&quot;: 35.39570652512722,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 857301984,\n\t\t\t&quot;version&quot;: 2842,\n\t\t\t&quot;versionNonce&quot;: 1768127456,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: [\n\t\t\t\t{\n\t\t\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t\t\t&quot;id&quot;: &quot;ASV4gcoB&quot;\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t&quot;id&quot;: &quot;yLTMtXU7mJ2VVozM2pUGN&quot;,\n\t\t\t\t\t&quot;type&quot;: &quot;arrow&quot;\n\t\t\t\t}\n\t\t\t],\n\t\t\t&quot;updated&quot;: 1709741337773,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;ASV4gcoB&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -877.438780576856,\n\t\t\t&quot;y&quot;: 1415.4940259602822,\n\t\t\t&quot;width&quot;: 228.38030556490907,\n\t\t\t&quot;height&quot;: 20.823021683923695,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#1e1e1e&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 152824800,\n\t\t\t&quot;version&quot;: 3414,\n\t\t\t&quot;versionNonce&quot;: 523405280,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741337774,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;setState triggers a new build&quot;,\n\t\t\t&quot;rawText&quot;: &quot;setState triggers a new build&quot;,\n\t\t\t&quot;fontSize&quot;: 18.106975377324954,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;center&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;middle&quot;,\n\t\t\t&quot;baseline&quot;: 17,\n\t\t\t&quot;containerId&quot;: &quot;frU3utNp5Mo_PQr6BiOzv&quot;,\n\t\t\t&quot;originalText&quot;: &quot;setState triggers a new build&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;yLTMtXU7mJ2VVozM2pUGN&quot;,\n\t\t\t&quot;type&quot;: &quot;arrow&quot;,\n\t\t\t&quot;x&quot;: -893.2304999199064,\n\t\t\t&quot;y&quot;: 1427.0639466455657,\n\t\t\t&quot;width&quot;: 21.158239855497325,\n\t\t\t&quot;height&quot;: 3.219288645264561,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 0,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 2\n\t\t\t},\n\t\t\t&quot;seed&quot;: 571225632,\n\t\t\t&quot;version&quot;: 926,\n\t\t\t&quot;versionNonce&quot;: 1537645088,\n\t\t\t&quot;isDeleted&quot;: false,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741337775,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;points&quot;: [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21.158239855497325,\n\t\t\t\t\t3.219288645264561\n\t\t\t\t]\n\t\t\t],\n\t\t\t&quot;lastCommittedPoint&quot;: null,\n\t\t\t&quot;startBinding&quot;: {\n\t\t\t\t&quot;elementId&quot;: &quot;frU3utNp5Mo_PQr6BiOzv&quot;,\n\t\t\t\t&quot;focus&quot;: 0.5062190361467601,\n\t\t\t\t&quot;gap&quot;: 4.567898520817323\n\t\t\t},\n\t\t\t&quot;endBinding&quot;: null,\n\t\t\t&quot;startArrowhead&quot;: null,\n\t\t\t&quot;endArrowhead&quot;: &quot;arrow&quot;\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;ycDmsvCaDnrP0E8bVyaus&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -1202.9667362349971,\n\t\t\t&quot;y&quot;: 22.093433929863522,\n\t\t\t&quot;width&quot;: 691.2835482893317,\n\t\t\t&quot;height&quot;: 62.304740116513926,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 1576743904,\n\t\t\t&quot;version&quot;: 56,\n\t\t\t&quot;versionNonce&quot;: 1609386528,\n\t\t\t&quot;isDeleted&quot;: true,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741053987,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;jJ08heauWE7915uQ-dm48&quot;,\n\t\t\t&quot;type&quot;: &quot;rectangle&quot;,\n\t\t\t&quot;x&quot;: -725.9286881813873,\n\t\t\t&quot;y&quot;: -5.065158557340169,\n\t\t\t&quot;width&quot;: 440.6354180697738,\n\t\t\t&quot;height&quot;: 88.08425377155174,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;transparent&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 1,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: {\n\t\t\t\t&quot;type&quot;: 3\n\t\t\t},\n\t\t\t&quot;seed&quot;: 841713632,\n\t\t\t&quot;version&quot;: 25,\n\t\t\t&quot;versionNonce&quot;: 1476126688,\n\t\t\t&quot;isDeleted&quot;: true,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741053987,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false\n\t\t},\n\t\t{\n\t\t\t&quot;id&quot;: &quot;G0hU9Hdg&quot;,\n\t\t\t&quot;type&quot;: &quot;text&quot;,\n\t\t\t&quot;x&quot;: -523.6976773427967,\n\t\t\t&quot;y&quot;: 1489.8874336665003,\n\t\t\t&quot;width&quot;: 5.556640625,\n\t\t\t&quot;height&quot;: 23,\n\t\t\t&quot;angle&quot;: 0,\n\t\t\t&quot;strokeColor&quot;: &quot;#ffffff&quot;,\n\t\t\t&quot;backgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t\t&quot;fillStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;strokeWidth&quot;: 2,\n\t\t\t&quot;strokeStyle&quot;: &quot;solid&quot;,\n\t\t\t&quot;roughness&quot;: 0,\n\t\t\t&quot;opacity&quot;: 100,\n\t\t\t&quot;groupIds&quot;: [],\n\t\t\t&quot;frameId&quot;: null,\n\t\t\t&quot;roundness&quot;: null,\n\t\t\t&quot;seed&quot;: 13215264,\n\t\t\t&quot;version&quot;: 2,\n\t\t\t&quot;versionNonce&quot;: 269406176,\n\t\t\t&quot;isDeleted&quot;: true,\n\t\t\t&quot;boundElements&quot;: null,\n\t\t\t&quot;updated&quot;: 1709741233282,\n\t\t\t&quot;link&quot;: null,\n\t\t\t&quot;locked&quot;: false,\n\t\t\t&quot;text&quot;: &quot;&quot;,\n\t\t\t&quot;rawText&quot;: &quot;&quot;,\n\t\t\t&quot;fontSize&quot;: 20,\n\t\t\t&quot;fontFamily&quot;: 2,\n\t\t\t&quot;textAlign&quot;: &quot;left&quot;,\n\t\t\t&quot;verticalAlign&quot;: &quot;top&quot;,\n\t\t\t&quot;baseline&quot;: 19,\n\t\t\t&quot;containerId&quot;: null,\n\t\t\t&quot;originalText&quot;: &quot;&quot;,\n\t\t\t&quot;lineHeight&quot;: 1.15\n\t\t}\n\t],\n\t&quot;appState&quot;: {\n\t\t&quot;theme&quot;: &quot;light&quot;,\n\t\t&quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;,\n\t\t&quot;currentItemStrokeColor&quot;: &quot;#ffffff&quot;,\n\t\t&quot;currentItemBackgroundColor&quot;: &quot;#b3b3b3&quot;,\n\t\t&quot;currentItemFillStyle&quot;: &quot;solid&quot;,\n\t\t&quot;currentItemStrokeWidth&quot;: 2,\n\t\t&quot;currentItemStrokeStyle&quot;: &quot;solid&quot;,\n\t\t&quot;currentItemRoughness&quot;: 0,\n\t\t&quot;currentItemOpacity&quot;: 100,\n\t\t&quot;currentItemFontFamily&quot;: 2,\n\t\t&quot;currentItemFontSize&quot;: 16,\n\t\t&quot;currentItemTextAlign&quot;: &quot;left&quot;,\n\t\t&quot;currentItemStartArrowhead&quot;: null,\n\t\t&quot;currentItemEndArrowhead&quot;: &quot;arrow&quot;,\n\t\t&quot;scrollX&quot;: 1528.9832427836748,\n\t\t&quot;scrollY&quot;: -74.30498708814454,\n\t\t&quot;zoom&quot;: {\n\t\t\t&quot;value&quot;: 0.9423164297747658\n\t\t},\n\t\t&quot;currentItemRoundness&quot;: &quot;round&quot;,\n\t\t&quot;gridSize&quot;: null,\n\t\t&quot;gridColor&quot;: {\n\t\t\t&quot;Bold&quot;: &quot;#C9C9C9FF&quot;,\n\t\t\t&quot;Regular&quot;: &quot;#EDEDEDFF&quot;\n\t\t},\n\t\t&quot;currentStrokeOptions&quot;: null,\n\t\t&quot;previousGridSize&quot;: null,\n\t\t&quot;frameRendering&quot;: {\n\t\t\t&quot;enabled&quot;: true,\n\t\t\t&quot;clip&quot;: true,\n\t\t\t&quot;name&quot;: true,\n\t\t\t&quot;outline&quot;: true\n\t\t}\n\t},\n\t&quot;files&quot;: {}\n}</code></pre></figure>\n<p>%%</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Stream_controller.excalidraw.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Stream_controller.excalidraw.html"
      ]
    },
    "Flutter_Cookbook_Simone/Streams": {
      "id": "Flutter_Cookbook_Simone/Streams",
      "type": "file",
      "title": "Working from example project color_stream_bg",
      "content": "<p>--- tags: [flutter, dart, state, state_management, future, async] --- In contrast, <code>Future</code> can be used to <code>await</code> a single object, <strong>while</strong>, <code>Stream</code> is the class allows continuous flow. A data stream is _listened_ to and waits for new data. Like a <code>Future</code>, a <code>Stream</code> can emit datum and errors.</p>\n<h6>Working from example project color_stream_bg</h6>\n<p>When creating a data stream the function signature is such, <code>Stream&lt;T&gt; myFunc() async<em></code>. The asterisks and the return type are emblematic of a <code>Stream</code>. Conceptually, the main difference between a <code>Future</code> and a <code>Stream</code> is the number events being returned.  These <code>Stream</code> functions are called <strong>generators</strong>. <code>Stream.periodic()</code> creates the event emitting <code>Stream</code>, which is prefaced with a <code>yield</em></code>. The _period_(interval) in which the <code>Stream</code> is spits out data specified in the first parameter to <code>Stream.periodic()</code>. The second parameter to <code>Stream.periodic()</code> is the total count of interval units (time) that have elapsed.</p>\n<figure class=\"code-block\"><pre id=\"code-block-31\" data-language=\"dart\"><code class=\"code-block language-dart\">Stream&lt;List&lt;dynamic&gt;&gt; getColors() async* {\n  yield* Stream.periodic(const \n    Duration(milliseconds: 100), (int t) {\n\t  int index = t % colors.length;\n\t  return [colors[index], t];\n\t});\n}</code></pre></figure>\n<p>Above is a fully functioning <code>Stream</code>. Now we need to _listen_ to it.  First, we need to _initialize_ the stream once.</p>\n<figure class=\"code-block\"><pre id=\"code-block-32\" data-language=\"dart\"><code class=\"code-block language-dart\">Color bgColor = Colors.blueGrey;\nlate ColorStream colorStream;\nlate int num;\n\n@override\nvoid initState() {\n\tsuper.initState();\n\tcolorStream = ColorStream();\n\tnum = -1;\n\tchangeColor();\n}</code></pre></figure>\n<p>Conceptually, we need to _wait for_ flow of data and process it accordingly.</p>\n<figure class=\"code-block\"><pre id=\"code-block-33\" data-language=\"dart\"><code class=\"code-block language-dart\">changeColor() async { \n  await for (var eventColor in \n    colorStream.getColors()) { \n      setState(() { \n        bgColor = eventColor; \n        });\n} }</code></pre></figure>\n<p>Alternatively,</p>\n<figure class=\"code-block\"><pre id=\"code-block-34\" data-language=\"dart\"><code class=\"code-block language-dart\">colorStream.getColors().listen((eventColor) { \n  setState(() { \n    bgColor = eventColor; \n  }); });</code></pre></figure>\n<h5><code>await for</code> <strong>vs</strong> <code>.listen()</code></h5>\n<p><a href=\"https://dart.dev/tutorials/language/streams#listen-method\" target=\"_blank\" rel=\"noopener\">Source - Dart Docs</a> <code>.listen()</code> - Low level method. All other <code>Stream</code> methods depend on it. <code>await for</code> - this is syntactic sugar around <code>.listen()</code>.</p>\n<h4>Controller and Sinks</h4>\n<p><code>StreamControllers</code> are for <code>Stream</code> management and their property <code>sinks</code> are used to insert events. Streams can be envisioned as a one-way funnel.</p>\n<figure class=\"image-block\"><img src=\"Streamcontrollerdraw\" alt=\"Streamcontrollerdraw\" /></figure>\n<p>The creation of a <code>StreamController</code> and a helper function to add to the <code>controller</code>'s <code>sink</code> property.</p>\n<figure class=\"code-block\"><pre id=\"code-block-35\" data-language=\"dart\"><code class=\"code-block language-dart\">final StreamController&lt;int&gt; controller = \n  StreamController&lt;int&gt;();\n\nvoid addNumberToSink(int newNumber) {\n  controller.sink.add(newNumber);\n}</code></pre></figure>\n<p>The function <code>addNumberToSink</code> is used to insert (integers, in this case) into a <code>Stream</code> by means of a <code>sink</code>.  The orchestration is assisted by class member variables.</p>\n<figure class=\"code-block\"><pre id=\"code-block-36\" data-language=\"dart\"><code class=\"code-block language-dart\"> int lastNumber = 0;\n late StreamController numberStreamController;\n late NumberStream numberStream;</code></pre></figure>\n<p>The two undeclared variables will be set in the <code>initState()</code></p>\n<figure class=\"code-block\"><pre id=\"code-block-37\" data-language=\"dart\"><code class=\"code-block language-dart\">@override\nvoid initState() {\n  numberStream = NumberStream();\n  numberStreamController = numberStream.controller;\n  Stream stream = numberStreamController.stream;\n  stream.listen((event) {\n    setState(() {\n  \tlastNumber = event;\n    });\n  });\n  super.initState();\n}</code></pre></figure>\n<figure class=\"image-block\"><img src=\"Stream_controller.excalidraw\" alt=\"Stream_controller\" width=\"555\" /></figure>\n<p>Throw an error is done with, <code>numberStream.addError()</code> And catching it done by,</p>\n<figure class=\"code-block\"><pre id=\"code-block-38\" data-language=\"dart\"><code class=\"code-block language-dart\">stream.listen((event) { \n  setState(() { \n    lastNumber = event; }); \n}).onError((error) {\n  setState(() {\n    astNumber =-1; }); });</code></pre></figure>\n<h5>Manipulating emitted <code>Stream</code> data</h5>\n<p>Using <code>StreamTransformer</code> allows an explicit time and place to modify stream data.</p>\n<h6>Working from example project stream_trans</h6>\n<p>Implementing, first, declare a member variable. <code>late StreamTransformer tx;</code> In the <code>initState()</code> configure a <code>StreamTransformer</code>,</p>\n<figure class=\"code-block\"><pre id=\"code-block-39\" data-language=\"dart\"><code class=\"code-block language-dart\">tx = StreamTransformer&lt;int, int&gt;.fromHandlers(\n\thandleData: (value, sink) {\n\t  sink.add(value * 10);\n\t},\n\thandleError: (error, trace, sink) {\n\t  sink.add(-1);\n\t},\n\thandleDone: (sink) =&gt; sink.close());</code></pre></figure>\n<p>Wrangling the emitted stream data with a trivial operation.</p>\n<h6>Working from example project stream_sub</h6>\n<p>When <code>listen</code> is called on a <code>Stream</code> a <code>StreamSubscription</code> is returned. When subscriptions are explicitly created one can specify properties like <code>onDone</code>,  <code>onError</code>, or <code>cancelOnError</code>.</p>\n<h4>Broadcast <code>Stream</code>s</h4>\n<p>Multiple listeners on the same <code>Stream</code>.</p>\n<h6>Working from example project stream_broad</h6>\n<p>Many subscribers to one broadcast stream.</p>\n<h3>Reactive interfaces with <code>StreamBuilder</code></h3>\n<p><code>StreamBuilder</code> is an efficient way to rebuild widgets on the screen. Traditionally, a <code>setState()</code> will trigger a re-build() of an entire widget tree. Sometime, we only want to re-build certain widgets on the tree. <strong>Only widgets contained in <code>StreamBuilder</code> are re-drawn</strong>.</p>\n<h6>Working from example project streambuilder_app</h6>\n<h4>BLoC Design Pattern</h4>\n<p>_everything is a stream of events_ in <strong>B</strong>usiness <strong>L</strong>ogic <strong>C</strong>omponent pattern. Separating the source data(HTTP data retrieval or JSON from a Database) from the user interface.</p>\n<h6>Working from example project streambuilder_app2</h6>\n<p>3 Concepts to adhere to:</p>\n<ol>\n<li>Receive <code>Stream</code> (source data)</li>\n<li>Transform data</li>\n<li>Return <code>Stream</code> to subscribers</li>\n</ol>\n<figure class=\"image-block\"><img src=\"streamBuilder.excalidraw\" alt=\"streamBuilder\" width=\"555\" /></figure>\n<p>10 tips for BLoC</p>\n<ol>\n<li>Create a class that will serve as the BLoC.</li>\n<li>In the class, declare the data that needs to be updated in the app.</li>\n<li>Set <code>StreamControllers</code>.</li>\n<li>Create the getters for streams and sinks.</li>\n<li>Add the logic of the BLoC.</li>\n<li>Add a constructor in which you’ll set the data.</li>\n<li>Listen to changes.</li>\n<li>Set a <code>dispose</code> method.</li>\n<li>From the UI, create an instance of the BLoC.</li>\n<li>Use <code>StreamBuilder</code> to build the widgets that will use the BLoC data.</li>\n<li>Add events to the sink for any changes to the data (if required).</li>\n</ol>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Streams.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Streams.html"
      ]
    },
    "Flutter_Cookbook_Simone/The_Dart_Language": {
      "id": "Flutter_Cookbook_Simone/The_Dart_Language",
      "type": "file",
      "title": "Examples ran in [DartPad.dev](https://dartpad.dev/?)",
      "content": "<p>--- tags: [dart, const, final, var, variables, type, types, dynamic, mutable, variables, immutable, variables, OOP, Object_Oriented_Programming, records, switch_statement, class, closure, inheritance] --- A language made by Google in 2011 meant to supplant Javascript. Conservative in nature.</p>\n<ul>\n<li>strongly typed language</li>\n<li>support asynchronous programming</li>\n<li>uses both JIT and AOT</li>\n<li>Since Dart 3 it is now soundly null safe</li>\n<p>---</p>\n</ul>\n<h2>Examples ran in <a href=\"https://dartpad.dev/?\" target=\"_blank\" rel=\"noopener\">DartPad.dev</a></h2>\n<figure class=\"code-block\"><pre id=\"code-block-40\" data-language=\"dart\"><code class=\"code-block language-dart\">void main() {\n  variablePlayground(); \n\n}\nvoid variablePlayground() {\n basicTypes();\n}\nvoid basicTypes() {\n int four = 4;\n double pi = 3.14;\n num someNumber = 24601;\n bool yes = true;\n bool no = false;\n int? nothing; \n print(four);\n print(pi); \n print(someNumber);\n print(yes);\n print(no);\n print(nothing == null);\n}</code></pre></figure>\n<p>The above outputs...</p>\n<figure class=\"code-block\"><pre id=\"code-block-41\" data-language=\"shell\"><code class=\"code-block language-shell\">4\n3.14\n24601\ntrue\nfalse\ntrue</code></pre></figure>\n<p>Dynamic types are sort of a 'get out of jail free card' that can be anything and should <strong>NOT</strong> be used.</p>\n<figure class=\"code-block\"><pre id=\"code-block-42\" data-language=\"dart\"><code class=\"code-block language-dart\">void untypedVariables() {\n dynamic something = 14.2;\n print(something.runtimeType); //outputs &#x27;double&#x27;\n}</code></pre></figure>\n<h6>Similar type inferring can be done with <code>var</code> <strong>but NOT exactly the same</strong></h6>\n<figure class=\"code-block\"><pre id=\"code-block-43\" data-language=\"dart\"><code class=\"code-block language-dart\">void typeInterpolation() {\n var anInteger = 15;\n var aDouble = 27.6;\n var aBoolean = false;\n print(anInteger.runtimeType);\n print(anInteger);\n print(aDouble.runtimeType);\n print(aDouble);\n print(aBoolean.runtimeType);\n print(aBoolean);\n}</code></pre></figure>\n<p>outputs</p>\n<figure class=\"code-block\"><pre id=\"code-block-44\" data-language=\"shell\"><code class=\"code-block language-shell\">int\n15\ndouble\n27.6\nbool\nfalse</code></pre></figure>\n<p>In the above snippet the variable <code>anInteger</code> is only mutable within the bounds of the <code>int</code> type.</p>\n<h4>Immutable variables</h4>\n<p><code>final</code> and <code>const</code> must be determined at compile time. For example, a <code>const</code> variable cannot be have the value of <code>DateTime.now()</code> since the date can only determined at runtime. <code>final</code> variables have a little leeway. Though, they can only be assigned once, if the <code>final</code> variable is assigned to an object then the value of the variable can change by adjusting the fields of that object. <code>const</code> does not have this flexibility. Generally, it is a good idea to favor immutable over mutable because mutability is more likely to lead to errors and immutable variables are faster.</p>\n<h3>Strings and string interpolation</h3>\n<figure class=\"code-block\"><pre id=\"code-block-45\" data-language=\"dart\"><code class=\"code-block language-dart\">final age = 42;\nfinal howOld = &#x27;I am $age ${age == 1 ? &#x27;year&#x27; : &#x27;years&#x27;} old.&#x27;; print(howOld);</code></pre></figure>\n<p>In the snippet above, placing simple variables in a string is done with <code>$</code> but the brackets are necessary if you want an expression to be computed in the string.</p>\n<figure class=\"code-block\"><pre id=\"code-block-46\" data-language=\"dart\"><code class=\"code-block language-dart\">final rawString = r&#x27;I want to show an escape \\ character&#x27;;</code></pre></figure>\n<p>The <code>r'..'</code> raw string is used to print escape characters. Dart also has a <code>StringBuffer</code> which is like Java's string builder. The functionality is an incremental string concatenator. <code>StringBuffer</code> as better performance than normal string interpolation.</p>\n<figure class=\"code-block\"><pre id=\"code-block-47\" data-language=\"dart\"><code class=\"code-block language-dart\">List fruits = [&#x27;Strawberry&#x27;, &#x27;Coconut&#x27;, \n\t\t\t   &#x27;Orange&#x27;, &#x27;Mango&#x27;, &#x27;Apple&#x27;];\nStringBuffer buffer = StringBuffer();\nfor (String fruit in fruits) { \n\tbuffer.write(fruit);\n\tbuffer.write(&#x27; &#x27;);\n\t } \nprint (buffer.toString());\n\t  // prints: Strawberry Coconut Orange Mango Apple</code></pre></figure>\n<h4>Functions</h4>\n<p>Normal structure</p>\n<figure class=\"code-block\"><pre id=\"code-block-48\" data-language=\"dart\"><code class=\"code-block language-dart\">int factorial(int number){\n\tif (number &lt;= 0){\n\treturn 1;\n\t}\n\treturn number * factorial(number - 1)\n}</code></pre></figure>\n<p><strong>Optional positional parameters</strong> are wrapped in square brackets. The <code>?</code> after the type tells the Dart compiler that the parameter itself can be null.</p>\n<h6>Null-Aware Coalescing Operator</h6>\n<figure class=\"code-block\"><pre id=\"code-block-49\" data-language=\"dart\"><code class=\"code-block language-dart\"> void unnamed([String? name, int? age]) {\n  final actualName = name ?? &#x27;Unknown&#x27;;\n  final actualAge = age ?? 0;\n  print(&#x27;$actualName is $actualAge years old.&#x27;);\n }</code></pre></figure>\n<p>In the above snippet, the double <code>??</code> is the <strong>null-aware coalescing operator</strong> which is a quick to check if a value is null then provide a default value if it is. <strong>Named Optional Parameters</strong> with curly brackets <code>{}</code>. When calling a function with named parameters you <strong>NEED</strong> to specify the parameter name but the parameter list can be in any order.</p>\n<figure class=\"code-block\"><pre id=\"code-block-50\" data-language=\"dart\"><code class=\"code-block language-dart\">void named({String? greeting, String? name}) {\n  final actualGreeting = greeting ?? &#x27;Hello&#x27;;\n  final actualName = name ?? &#x27;Mystery Person&#x27;;\n  print(&#x27;$actualGreeting, $actualName!&#x27;);\n     }</code></pre></figure>\n<p><strong>BOTH</strong> optional parameters and optional named parameter support default values. If a function is called with one of these styles then <code>null</code> will not be used in preference to their default value. In the below example, there is a mix of both <strong>required</strong> and <strong>named optional</strong>.</p>\n<figure class=\"code-block\"><pre id=\"code-block-51\" data-language=\"dart\"><code class=\"code-block language-dart\">String duplicate(String name, {int times = 1}) {\n  final merged = StringBuffer(name);\n  for (var i = 1; i &lt; times; i++) {\n    merged.write(&#x27; $name&#x27;);\n     } \n  return merged.toString();}</code></pre></figure>\n<p>For completeness the above is called like <code>duplicate('Mikey', times: 3);</code></p>\n<h1>Name Parameters make readable code</h1>\n<p>When a function does not have a return type or functional parameter, the <strong>dynamic</strong> type is used but this style should be avoided.</p>\n<h3>Functions as a variable -&gt; Closures</h3>\n<p>Closures are known as first-class functions. As a language feature they emerged form lambda calculus. Closure allow functions to be passed as parameters to other functions. To add a closure to a function, define another function signature inside a function.</p>\n<figure class=\"code-block\"><pre id=\"code-block-52\" data-language=\"dart\"><code class=\"code-block language-dart\">void callbackExample(\n\tvoid Function(String value) callback\n) {\n  callback(&#x27;Hello Callback&#x27;);\n}\n\nvoid printSomething(String value) { print(value); }</code></pre></figure>\n<p>The above closure the function is initiated by <code>callbackExmaple(printSomething)</code> The variable <code>callback</code> has a value of the function <code>printSomething</code> The above snippet is defines an inline closure. A less verbose way is to the type alias called <code>typedef</code>. It makes the function signature cleaner.</p>\n<figure class=\"code-block\"><pre id=\"code-block-53\" data-language=\"dart\"><code class=\"code-block language-dart\">typedef CallBack = void Functions(); \n\nvoid callbackExample(CallBack callback ) {\n  callback(&#x27;Hello Callback&#x27;);\n  }</code></pre></figure>\n<p>Another example...</p>\n<figure class=\"code-block\"><pre id=\"code-block-54\" data-language=\"dart\"><code class=\"code-block language-dart\">typedef NumberGetter = int Function();\n\nint powerOfTwo(NumberGetter getter) {\n return getter() * getter();\n}</code></pre></figure>\n<p>The above code is activated by the below snippet. Notice the <em>rocket notation</em> for single line functions.</p>\n<figure class=\"code-block\"><pre id=\"code-block-55\" data-language=\"dart\"><code class=\"code-block language-dart\">int getFour() =&gt; 4;\nfinal squared = powerOfTwo(getFour);</code></pre></figure>\n<h4>Switch Statements</h4>\n<figure class=\"code-block\"><pre id=\"code-block-56\" data-language=\"dart\"><code class=\"code-block language-dart\">int dayOfWeek = 7;\n//String myDay = getDay(dayOfWeek);\nvar myDay = switch (dayOfWeek) {\n\t1 =&gt; &#x27;Monday&#x27;,\n\t2 =&gt; &#x27;Tuesday&#x27;,\n\t3 =&gt; &#x27;Wednesday&#x27;,\n\t4 =&gt; &#x27;Thursday&#x27;,\n    5 =&gt; &#x27;Friday&#x27;,\n    6 =&gt; &#x27;Saturday&#x27;,\n    7 =&gt; &#x27;Sunday&#x27; ,\n    _ =&gt; &#x27;Invalid day&#x27; //Default value \n    };\nprint(myDay);</code></pre></figure>\n<h3>Records</h3>\n<p>Since Dart 3, the <strong>record expression</strong> is used to hold custom data like ...</p>\n<figure class=\"code-block\"><pre id=\"code-block-57\" data-language=\"dart\"><code class=\"code-block language-dart\">var person = (name: &#x27;Clark&#x27;, age: 42);\nprint (person.name);</code></pre></figure>\n<p>In the above case, the variable <code>person</code> is the <strong>record expression</strong>. These are an immutable set of fields. The below functions <code>getPeron</code> returns a <strong>record</strong> which is similar to a tuple.</p>\n<figure class=\"code-block\"><pre id=\"code-block-58\" data-language=\"dart\"><code class=\"code-block language-dart\">void main() {\n  var (String name, int age) = \n\t\t  getPerson( {&#x27;name&#x27;: &#x27;Clark&#x27;, &#x27;age&#x27;: 42});\n  print(&#x27;$name is $age years old.&#x27;);\n   }\n(String, int) getPerson(Map&lt;String, dynamic&gt; json) {\n  return (json[&#x27;name&#x27;] as String, json[&#x27;age&#x27;] as int);\n   }</code></pre></figure>\n<h3>Classes</h3>\n<p>Not much different from other <a href=\"Programming%20Paradigms\">Object Oriented languages</a>. Classes are used to make custom types.</p>\n<figure class=\"code-block\"><pre id=\"code-block-59\" data-language=\"dart\"><code class=\"code-block language-dart\">class Name {\n   final String first;\n   final String last;\n   Name(this.first, this.last);\n   @override \n   String toString() { \n   return &#x27;$first $last&#x27;; \n   } \n}</code></pre></figure>\n<p>Now using the above and class through inheritance.</p>\n<figure class=\"code-block\"><pre id=\"code-block-60\" data-language=\"dart\"><code class=\"code-block language-dart\">class OfficialName extends Name {\n// Private properties begin with an underscore \n  final String _title;\n   // You can add colons after constructor \n   // to parse data or delegate to super \n  OfficialName(this._title, String first, String last) \n\t  : super(first, last);\n  @override \n  String toString() { \n    return &#x27;$_title. ${super.toString()}&#x27;; } }</code></pre></figure>\n<p>How the above is used</p>\n<figure class=\"code-block\"><pre id=\"code-block-61\" data-language=\"dart\"><code class=\"code-block language-dart\">final name = OfficialName(&#x27;Mr&#x27;, &#x27;Clark&#x27;, &#x27;Kent&#x27;);\nfinal message = name.toString();\nprint(message)</code></pre></figure>\n<p>A note about the <em>constructor shorthand</em> <code>const Name(this.first, this.last) : super(first, last):</code> This allows member variable assignment by using <code>this</code> with dot notation.</p>\n<h4>Building Block of Object Oriented Programming</h4>\n<h6>3 keywords for building relationships</h6>\n<ol>\n<li><code>extends</code> -&gt; _class inheritance_</li>\n<li><code>implements</code> -&gt; _interface conformance_</li>\n<li><code>with</code> -&gt; _apply mixin_</li>\n<p><code>extends</code> adds functionality to the super class. 1 extends per class <code>implements</code> <strong>all classes are implicit interfaces</strong>. Does not inherit any code just a contract to write a the same function signatures. Infinite implements can be applied to a class. <code>with</code> uses <code>mixin</code>s for multiple class hierarchies. When defining a <code>mixin</code>, <code>extends</code> cannot be used. A <code>mixin</code> declaration defines a <code>mixin</code>. A <code>class</code> declaration defines a <a href=\"https://dart.dev/language/classes\" target=\"_blank\" rel=\"noopener\">class</a>. A <code>mixin class</code> declaration defines a class that is usable as both a regular class and a <code>mixin</code>, with the same name and the same type.</p>\n</ol>\n<h5>Spread Operator</h5>\n<p>A brief way to add multiple values into a collection.</p>\n<figure class=\"code-block\"><pre id=\"code-block-62\" data-language=\"dart\"><code class=\"code-block language-dart\">var list = [1, 2, 3];\nvar list2 = [0, ...list];\nassert(list2.length == 4);</code></pre></figure>\n<p>If <code>list</code> variable could be <strong>null</strong> use the <strong>null-aware spread operator</strong></p>\n<figure class=\"code-block\"><pre id=\"code-block-63\" data-language=\"dart\"><code class=\"code-block language-dart\">var list2 = [0, ...?list];</code></pre></figure>\n<h4>Higher-Order Functions</h4>\n<p>Functions that take one or more functions as arguments or return a function. Given data of this form. The goal is to turn this mapping into a strongly typed object.</p>\n<figure class=\"code-block\"><pre id=\"code-block-64\" data-language=\"dart\"><code class=\"code-block language-dart\">List&lt;Map&gt; data = [\n\t{&#x27;first&#x27;: &#x27;Nada&#x27;, &#x27;last&#x27;: &#x27;Mueller&#x27;, &#x27;age&#x27;: 10},\n\t\t\t\t...\n\t\t\t\t];</code></pre></figure>\n<p>We will use the previous seen <code>Name</code> class</p>\n<figure class=\"code-block\"><pre id=\"code-block-65\" data-language=\"dart\"><code class=\"code-block language-dart\">class Name {\n  final String first;\n  final String last;\n  Name(this.first, this.last);\n  @override\n  String toString() {\n   return &#x27;$first $last&#x27;; } }</code></pre></figure>\n<p>We will use <code>map</code> function to transform the data into a new form. From a <code>Map</code> type to encapsulating in a class (object) called <code>Name</code>. Imagine the <code>data</code> variable above is a global variable and is in scope of the function <code>mapping()</code> below.</p>\n<figure class=\"code-block\"><pre id=\"code-block-66\" data-language=\"dart\"><code class=\"code-block language-dart\">List&lt;Name&gt; mapping() {\n// Transform the data \n\t// from raw maps to a strongly typed model \nfinal names = data.map&lt;Name&gt;((Map rawName) {\n  final first = rawName[&#x27;first&#x27;];\n  final last = rawName[&#x27;last&#x27;];\n  return Name(first, last); }).toList();  \nreturn names; }</code></pre></figure>\n<p>The above snippet can also be done with a loop below. Notice how the mapping takes care of the looping and the adding to the list.</p>\n<figure class=\"code-block\"><pre id=\"code-block-67\" data-language=\"dart\"><code class=\"code-block language-dart\">final names = &lt;Name&gt;[];\nfor (Map rawName in data) {\n  final first = rawName[&#x27;first&#x27;];\n  final last = rawName[&#x27;last&#x27;];\n  final name = Name(first, last);\n  names.add(name); }</code></pre></figure>\n<p>Now that the <code>map</code> function's internals are understood there is even a more concise way translate the data variable of type <code>Map</code> into a strongly typed object.</p>\n<figure class=\"code-block\"><pre id=\"code-block-68\" data-language=\"dart\"><code class=\"code-block language-dart\">final names = data.map&lt;Name&gt;(\n  (raw) =&gt; Name(raw[&#x27;first&#x27;], raw[&#x27;last&#x27;]), ).toList();</code></pre></figure>\n<p>Now that data is properly formatted we can sort by the object's property (last name). Notice no new variable is created after <code>sort</code> is called therefore, <strong>in place sort</strong></p>\n<figure class=\"code-block\"><pre id=\"code-block-69\" data-language=\"dart\"><code class=\"code-block language-dart\">void sorting() {\n  final names = mapping();\n   // Sort the list by last name \n   names.sort((a, b) =&gt; a.last.compareTo(b.last));\n   print(&#x27;&#x27;);\n   print(&#x27;Alphabetical List of Names&#x27;);\n   names.forEach(print); }</code></pre></figure>\n<p>Pull a subset of data from the list of Name objects.</p>\n<figure class=\"code-block\"><pre id=\"code-block-70\" data-language=\"dart\"><code class=\"code-block language-dart\">void filtering() {\n  final names = mapping();\n  final onlyMs = names.where(\n\t  (name) =&gt; name.last.startsWith(&#x27;M&#x27;));\n  print(&#x27;&#x27;);\n  print(&#x27;Filters name list by M&#x27;);\n  onlyMs.forEach(print); }</code></pre></figure>\n<p>Calculate average age. <code>reduce</code> works like a running sum expression</p>\n<figure class=\"code-block\"><pre id=\"code-block-71\" data-language=\"dart\"><code class=\"code-block language-dart\">void reducing() {\n// Merge an element of the data together \nfinal allAges = data.map&lt;int&gt;((person) =&gt; person[&#x27;age&#x27;]);\nfinal total = allAges.reduce((total, age) =&gt; total + age);\nfinal average = total / allAges.length;\nprint(&#x27;The average age is $average&#x27;); }</code></pre></figure>\n<p>Flattening a multi-dimensional list to 1 dimensional.</p>\n<figure class=\"code-block\"><pre id=\"code-block-72\" data-language=\"dart\"><code class=\"code-block language-dart\">final matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [-7, -8, -9],\n];\nfinal linear = matrix.expand&lt;int&gt;((row) =&gt; row);</code></pre></figure>\n<p><code>(1, 2, 3, 4, 5, 6, -7, -8, -9)</code> Quick print of an iterable</p>\n<figure class=\"code-block\"><pre id=\"code-block-73\" data-language=\"dart\"><code class=\"code-block language-dart\">// Instead of doing this \ndata.forEach((value) { print(value); });\n// We can do this \ndata.forEach(print); </code></pre></figure>\n<p>Brevity by chaining higher-order functions</p>\n<figure class=\"code-block\"><pre id=\"code-block-74\" data-language=\"dart\"><code class=\"code-block language-dart\">final names = data .map&lt;Name&gt;(\n  (raw) =&gt; Name(raw[&#x27;first&#x27;], raw[&#x27;last&#x27;])) \n  .where((name) =&gt; name.last.startsWith(&#x27;M&#x27;)) \n  .where((name) =&gt; name.first.length &gt; 5) \n  .toList(growable: false);</code></pre></figure>\n<p>Iterables are _lazy_  so each high-order function is cached and only ran once the <code>.toList()</code> is called. The above is a single pass algorithm. By default in dart all lists are growable. Here, we declare the list cannot get any bigger than its initial size.</p>\n<h4>fold()</h4>\n<p><a href=\"https://api.dart.dev/stable/1.10.1/dart-core/List/fold.html\" target=\"_blank\" rel=\"noopener\">Source - Dart API</a></p>\n<figure class=\"code-block\"><pre id=\"code-block-75\" data-language=\"dart\"><code class=\"code-block language-dart\">dynamic fold(  \n\tinitialValue,\n\tdynamic combine(previousValue, E element)\n)</code></pre></figure>\n<p>Reduces a collection to a single value by iteratively combining each element of the collection with an existing value. Uses <code>initialValue</code> as the initial value, then iterates through the elements and updates the value with each element using the <code>combine</code> function, as if by:</p>\n<figure class=\"code-block\"><pre id=\"code-block-76\" data-language=\"dart\"><code class=\"code-block language-dart\">var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;</code></pre></figure>\n<p>Example of calculating the sum of an iterable:</p>\n<figure class=\"code-block\"><pre id=\"code-block-77\" data-language=\"dart\"><code class=\"code-block language-dart\">iterable.fold(0, (prev, element) =&gt; prev + element);</code></pre></figure>\n<h5>First class functions versus higher-order functions</h5>\n<ul>\n<li>A first-class function can be treated as a value: it can be assigned to a variable, passed as an argument, or returned as a value.</li>\n<li>A higher-order function takes one or more functions as arguments or returns a function as a result.</li>\n<p>This means that first-class functions can be treated as values, and higher-order functions take or return functions as input or output.</p>\n</ul>\n<h4>The Builder Pattern</h4>\n<p>used when constructors get too large. The below will incrementally build out the object with one constructor call at a time.</p>\n<figure class=\"code-block\"><pre id=\"code-block-78\" data-language=\"dart\"><code class=\"code-block language-dart\">class UrlBuilder {\n  String? _scheme;\n  String? _host;\n  String? _path;\n  UrlBuilder setScheme(String value) {\n    _scheme = value;\n    return this; }\n  UrlBuilder setHost(String value) {\n    _host = value;\n    return this; }\n  UrlBuilder setPath(String value) {\n    _path = value;\n    return this; }\n  String build() {\n    assert(_scheme != null);\n    assert(_host != null);\n    assert(_path != null);\n    return &#x27;$_scheme://$_host/$_path&#x27;; }\n} \nvoid main() {\n  final url = UrlBuilder() \n\t  .setScheme(&#x27;https&#x27;) \n\t  .setHost(&#x27;dart.dev&#x27;) \n\t  .setPath(&#x27;/guides/language/language-tour#cascade-notation-&#x27;) \n\t  .build();\n\t  print(url); }</code></pre></figure>\n<p>The above is verbose and unnecessary</p>\n<figure class=\"code-block\"><pre id=\"code-block-79\" data-language=\"dart\"><code class=\"code-block language-dart\">class UrlBuilder { \n  String scheme = &#x27;&#x27;;\n  String host = &#x27;&#x27;; \n  List&lt;String&gt; routes = []; \n  @override \n  String toString() { \n    final paths = [host, if (routes != []) ...routes]; \n    final path = paths.join(&#x27;/&#x27;); \n    return &#x27;$scheme://$path&#x27;; } }</code></pre></figure>\n<p>To populate the above class use the <strong>Cascade operator</strong></p>\n<figure class=\"code-block\"><pre id=\"code-block-80\" data-language=\"dart\"><code class=\"code-block language-dart\">final url = UrlBuilder() \n\t..scheme = &#x27;https&#x27; \n\t..host = &#x27;dart.dev&#x27; \n\t..routes = [ &#x27;guides&#x27;,\n\t\t\t\t &#x27;language&#x27;,\n\t\t\t\t  &#x27;language-tour#cascade-notation&#x27;, ];\n\t print(url);</code></pre></figure>\n<p>Another Cascade example</p>\n<figure class=\"code-block\"><pre id=\"code-block-81\" data-language=\"dart\"><code class=\"code-block language-dart\">final numbers = [342, 23423, 53, 232, 534]; \nnumbers.insert(0, 10);\nnumbers.sort((a, b) =&gt; a.compareTo(b));</code></pre></figure>\n<p>The above becomes this with Cascade</p>\n<figure class=\"code-block\"><pre id=\"code-block-82\" data-language=\"dart\"><code class=\"code-block language-dart\">final numbers = [342, 23423, 53, 232, 534] \n\t..insert(0, 10) \n\t..sort((a, b) =&gt; a.compareTo(b));</code></pre></figure>\n<h5>Extensions</h5>\n<p>Extensions allow methods and properties to be adding to existing classes without modifying the original class. Especially useful when the class cannot be changed...</p>\n<figure class=\"code-block\"><pre id=\"code-block-83\" data-language=\"dart\"><code class=\"code-block language-dart\">extension StringExtensions on String {\n  bool toBool() { return isNotEmpty; } \n  }</code></pre></figure>\n<h4>Sound Null Safety</h4>\n<p>Generally, variables that have no value are <code>null</code> but with <code>null</code> safety _variables cannot be assigned to a null value_ BUT the use of <code>null</code> can be beneficial so now <code>null</code> values have to be explicitly allowed. To force a _Uncaught TypeError_ use the <code>!</code></p>\n<figure class=\"code-block\"><pre id=\"code-block-84\" data-language=\"dart\"><code class=\"code-block language-dart\">void main() {\n int? someNumber;\n increaseValue(someNumber!);\n}\nvoid increaseValue(int value) {\n value++; \n print (value);\n}</code></pre></figure>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/The_Dart_Language.md",
      "aliases": [
        "Flutter_Cookbook_Simone/The_Dart_Language.html"
      ]
    },
    "Flutter_Cookbook_Simone/Unit_Testing": {
      "id": "Flutter_Cookbook_Simone/Unit_Testing",
      "type": "file",
      "title": "Write a test first!",
      "content": "<p>--- tags: [dart, flutter, test, testing, unit_test] ---</p>\n<h1>Write a test first!</h1>\n<p>Given the <code>flutter create project_name</code> basic template with a simple modification to change the color and font size based on the parity of button clicks</p>\n<h6>Below is the full app the test file</h6>\n<figure class=\"code-block\"><pre id=\"code-block-85\" data-language=\"dart\"><code class=\"code-block language-dart\">import &#x27;package:flutter/material.dart&#x27;;\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: &#x27;Flutter Demo&#x27;,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(\n\t        seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: const MyHomePage(\n\t      title: &#x27;Flutter Demo Home Page&#x27;),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();\n}\n\nclass _MyHomePageState extends State&lt;MyHomePage&gt; {\n  int _counter = 0;\n  Color color = Colors.red;\n  double font_size = 18;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n      if (isEven(_counter)) {\n        color = Colors.red;\n        font_size = 28;\n      } else {\n        color = Colors.green;\n        font_size = 18;\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Theme.of(context).\n\t        colorScheme.inversePrimary,\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: &lt;Widget&gt;[\n            Text(\n            &#x27;You have pushed the button this many times:&#x27;,\n                style: TextStyle(\n                  color: color,\n                  fontSize: font_size,\n                )),\n            Text(\n              &#x27;$_counter&#x27;,\n              style: Theme.of(context)\n\t              .textTheme.headlineMedium,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: &#x27;Increment&#x27;,\n        child: const Icon(Icons.add),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n\nbool isEven(int number) {\n  if (number % 2 == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}</code></pre></figure>\n<h3>from lib/test/unit_test.dart</h3>\n<figure class=\"code-block\"><pre id=\"code-block-86\" data-language=\"dart\"><code class=\"code-block language-dart\">import &#x27;package:flutter_test/flutter_test.dart&#x27;;\nimport &#x27;package:hello_flutter/main.dart&#x27;;\n\nvoid main() {\n  test(&#x27;Is Even&#x27;, () {\n    bool result = isEven(12);\n    expect(result, true);\n    result = isEven(123);\n    expect(result, false);\n  });\n}</code></pre></figure>\n<p>syntax for <code>test(test_name, function)</code> The above test is bad form because tests should only test one thing at a time. Better style below</p>\n<figure class=\"code-block\"><pre id=\"code-block-87\" data-language=\"dart\"><code class=\"code-block language-dart\">void main() {\n  test(&#x27;Is Even&#x27;, () {\n    bool result = isEven(12);\n    expect(result, true);\n  });\n  test(&#x27;Is Odd&#x27;, () {\n    bool result = isEven(123);\n    expect(result, false);\n  });\n}</code></pre></figure>\n<p>Purposefully fail. From the test named <code>Is Odd</code> change <code>expect(result, True);</code></p>\n<figure class=\"code-block\"><pre id=\"code-block-88\" data-language=\"shell\"><code class=\"code-block language-shell\">$ flutter test\n00:07 +1 -1: /Users/g_joss/Documents/Computation/flutter/cook_book_Alessandria/hello_flutter/test/unit_test.dart: Is Odd [E]\n  Expected: &lt;true&gt;\n    Actual: &lt;false&gt;\n  \n  package:matcher                                     expect\n  package:flutter_test/src/widget_tester.dart 454:18  expect\n  test/unit_test.dart 11:5                            main.&lt;fn&gt;\n  \n\nTo run this test again: /Users/g_joss/Developer/flutter/bin/cache/dart-sdk/bin/dart test /Users/g_joss/Documents/Computation/flutter/cook_book_Alessandria/hello_flutter/test/unit_test.dart -p vm --plain-name &#x27;Is Odd&#x27;\n00:09 +2 -1: Some tests failed.  </code></pre></figure>\n<p>Flutter tests have a grouping functionality to group similar tests.</p>\n<figure class=\"code-block\"><pre id=\"code-block-89\" data-language=\"dart\"><code class=\"code-block language-dart\">void main() {\n  group(&#x27;Iseven group&#x27;, () {\n    test(&#x27;Is Even&#x27;, () {\n      bool result = isEven(12);\n      expect(result, true);\n    });\n    test(&#x27;Is Odd&#x27;, () {\n      bool result = isEven(123);\n      expect(result, true);\n    });\n  });\n}</code></pre></figure>\n<p>With the same flawed code as above in the purposefully fail scenario. Below shows the shell message for a failing test within a group(seen immediately above)</p>\n<figure class=\"code-block\"><pre id=\"code-block-90\" data-language=\"shell\"><code class=\"code-block language-shell\">$ flutter test\n00:29 +1 -1: /Users/g_joss/Documents/Computation/flutter/cook_book_Alessandria/hello_flutter/test/unit_test.dart: Iseven group Is Odd [E]\n  Expected: &lt;true&gt;\n    Actual: &lt;false&gt;\n  \n  package:matcher                                     expect\n  package:flutter_test/src/widget_tester.dart 454:18  expect\n  test/unit_test.dart 12:7                            main.&lt;fn&gt;.&lt;fn&gt;\n  \n\nTo run this test again: /Users/g_joss/Developer/flutter/bin/cache/dart-sdk/bin/dart test /Users/g_joss/Documents/Computation/flutter/cook_book_Alessandria/hello_flutter/test/unit_test.dart -p vm --plain-name &#x27;Iseven group Is Odd&#x27;\n00:34 +2 -1: Some tests failed.  </code></pre></figure>\n<p><a href=\" [https://docs.flutter.dev/testing](https://docs.flutter.dev/testing\" target=\"_blank\" rel=\"noopener\">Official Docu on Testing</a>)</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Unit_Testing.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Unit_Testing.html"
      ]
    },
    "Flutter_Cookbook_Simone/Variable Declaration versus Initialization": {
      "id": "Flutter_Cookbook_Simone/Variable Declaration versus Initialization",
      "type": "file",
      "title": "Variable Declaration Versus Initialization",
      "content": "<p>--- tags: [dart, flutter, ] ---</p>\n<figure class=\"code-block\"><pre id=\"code-block-91\" data-language=\"dart\"><code class=\"code-block language-dart\">double? y; // Declare y, initially null.\ny = 20; // Initialized\ndouble y = 20; // Declared and initialized</code></pre></figure>\n<p>from <a href=\"Computing/web_dev/Flutter/Flutter_Cookbook_Simone/Variables\">Variables</a></p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Variable Declaration versus Initialization.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Variable Declaration versus Initialization.html"
      ]
    },
    "Flutter_Cookbook_Simone/Variables": {
      "id": "Flutter_Cookbook_Simone/Variables",
      "type": "file",
      "title": "Null Safety",
      "content": "<p>--- tags:  [dart, dart_language, variables, null_safety, nullable, late, final, const, lazy_intialization] --- _variable_ - a user defined symbols that hold a reference to some value. Aside, <a href=\"Variable%20Declaration%20versus%20Initialization\">Variable Declaration versus Initialization</a> <code>var</code></p>\n<ul>\n<li>stores mutable references</li>\n</ul>\n<h5>Null Safety</h5>\n<p>Is a best practice that  prevents the error(s) of 'unintentionally' accessing a variable set to null</p>\n<ul>\n<li>this error is called a 'null dereferenced error'</li>\n<p>Dart compiler detects the possibility of the null dereferenced errors at compile time <a href=\"https://dart.dev/language/variables#null-safety\" target=\"_blank\" rel=\"noopener\">Source - Dart Docs</a></p>\n</ul>\n<h4>Nullability in 3 steps</h4>\n<ol>\n<li>Must be use <code>?</code></li>\n</ol>\n<figure class=\"code-block\"><pre id=\"code-block-92\" data-language=\"dart\"><code class=\"code-block language-dart\">String? name  // Nullable type. Can be `null` or string.\n\nString name   // Non-nullable type. Cannot be `null` but can be string.</code></pre></figure>\n<ol>\n<li>Variable must be initialized before declaration</li>\n<li>You cannot access properties or call methods on an expression with nullable types</li>\n</ol>\n<h5><code>late</code></h5>\n<p>Use cases for <code>late</code> variables</p>\n<ul>\n<li>Declaring a non-nullable variable that is initialized after its declaration</li>\n</ul>\n<figure class=\"code-block\"><pre id=\"code-block-93\" data-language=\"dart\"><code class=\"code-block language-dart\">late String description;\n\nvoid main() {\n  description = &#x27;Feijoada!&#x27;;\n  print(description);\n}</code></pre></figure>\n<ul>\n<li>Lazy initializing of a variable</li>\n<p>In the following example if the variable <code>temperature</code> is never used then the function <code>readThermometer</code> is never called</p>\n</ul>\n<figure class=\"code-block\"><pre id=\"code-block-94\" data-language=\"dart\"><code class=\"code-block language-dart\">// This is the program&#x27;s only call to readThermometer().\nlate String temperature = readThermometer(); // Lazily initialized.</code></pre></figure>\n<h4><code>final</code> and <code>const</code></h4>\n<p>variables that never change. <strong>Immutable</strong> <code>const</code> 'compile-time constants' that will optimized runtime performance by storing the value in memory. Another way to say it, <code>const</code> variables must be determined at compile time</p>\n<h6><code>const</code> <em>variables</em> and their <em>values</em></h6>\n<figure class=\"code-block\"><pre id=\"code-block-95\" data-language=\"dart\"><code class=\"code-block language-dart\">var foo = const [];\nfinal bar = const [];\nconst baz = []; // Equivalent to `const []`</code></pre></figure>\n<p>regarding the <code>foo</code> variable,  notice it has a <code>const</code> value, but <code>foo</code> itself is not a <code>const</code> variable. Therefore...</p>\n<figure class=\"code-block\"><pre id=\"code-block-96\" data-language=\"dart\"><code class=\"code-block language-dart\">foo = [1, 2, 3];  // is valid\nbaz = [42]; // Error: Constant variables can&#x27;t be assigned a value.</code></pre></figure>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Variables.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Variables.html"
      ]
    },
    "Flutter_Cookbook_Simone/What_is_Flutter?": {
      "id": "Flutter_Cookbook_Simone/What_is_Flutter?",
      "type": "file",
      "title": "Channels",
      "content": "<p>--- tags: [flutter, channels, dart, framework] ---</p>\n<ol>\n<li>User Interface <a href=\"Framework\">Framework</a></li>\n<li>Collection of Tools</li>\n<p>Flutter is attempting, \"one codebase multi-platform\" Flutter UIs area created by combining and nesting widgets</p>\n</ol>\n<h5>Channels</h5>\n<ul>\n<li>Flutter segments it development streams</li>\n<li>Each channel represents different level of stability of the flutter framework</li>\n<li>As new features are being developed they are first released to the __master__ channel and as the new features stabilize they great promoted to the __beta__ channel and then finally to the __stable__ channel</li>\n</ul>\n<figure class=\"code-block\"><pre id=\"code-block-97\" data-language=\"shell\"><code class=\"code-block language-shell\">$ flutter channel\nFlutter channels:\n  master (latest development branch, for contributors)\n  main (latest development branch, follows master channel)\n  beta (updated monthly, recommended for experienced users)\n* stable (updated quarterly, for new users and for production app releases)</code></pre></figure>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/What_is_Flutter?.md",
      "aliases": [
        "Flutter_Cookbook_Simone/What_is_Flutter?.html"
      ]
    },
    "Flutter_Cookbook_Simone/Widgets": {
      "id": "Flutter_Cookbook_Simone/Widgets",
      "type": "file",
      "title": "Required",
      "content": "<p>--- tags: [dart, flutter, widgets, class] ---</p>\n<p>A class that inherits (<code>extends</code>) from a widget class</p>\n<figure class=\"code-block\"><pre id=\"code-block-98\" data-language=\"dart\"><code class=\"code-block language-dart\">class GradientContainer extends StatelessWidget {\n\tconst GradientContainer({super.key});\n\t@override\n\tWidget build(context) {}\n}</code></pre></figure>\n<h4>Required</h4>\n<ol>\n<li>class constructor defined</li>\n<ul>\n<li><code>const GradientContainer({super.key});</code>  assigning required variable to/in the parent class</li>\n</ul>\n<ol>\n<li><code>build</code> must return a <code>Widget</code></li>\n</ol>\n<ul>\n<li><code>Widget build(context)</code> is the driver function of a given widget</li>\n<p>Linking widgets across files, see example below</p>\n</ul>\n</ol>\n<ul>\n<li><a href=\"SimpleCustomWidget.canvas\">SimpleCustomWidget</a></li>\n</ul>\n<figure class=\"image-block\"><img src=\"simpleCustomWidget.png\" alt=\"simpleCustomWidget\" /></figure>\n<p>Passing Data  between widgets</p>\n<ul>\n<li><a href=\"PassingData.canvas\">PassingData</a></li>\n</ul>\n<figure class=\"image-block\"><img src=\"passData.png\" alt=\"passData\" /></figure>\n<h6>Alternative ways to declare the a class' constructor</h6>\n<ol>\n<li>'Classical way'</li>\n</ol>\n<figure class=\"code-block\"><pre id=\"code-block-99\" data-language=\"dart\"><code class=\"code-block language-dart\">class GradientContainer extends StatelessWidget {\n  const GradientContainer(\n  this.color1, this.color2, {super.key}\n  );\n//... cut off for brevity </code></pre></figure>\n<p>The use...</p>\n<figure class=\"code-block\"><pre id=\"code-block-100\" data-language=\"dart\"><code class=\"code-block language-dart\">//... cut off for brevity \n      home: Scaffold(\n        body: GradientContainer(\n          Color.fromARGB(255, 33, 5, 109),\n          Color.fromARGB(255, 68, 21, 149),\n        ),\n//... cut off for brevity </code></pre></figure>\n<ol>\n<li>Require named arguments inside the {}</li>\n</ol>\n<figure class=\"code-block\"><pre id=\"code-block-101\" data-language=\"dart\"><code class=\"code-block language-dart\">class GradientContainer extends StatelessWidget {\n  const GradientContainer(\n      {super.key, \n      required this.color1, required this.color2}\n  );\n//... cut off for brevity </code></pre></figure>\n<p>the use...</p>\n<figure class=\"code-block\"><pre id=\"code-block-102\" data-language=\"dart\"><code class=\"code-block language-dart\">//... cut off for brevity \n      home: Scaffold(\n        body: GradientContainer(\n          color1: Color.fromARGB(255, 33, 5, 109),\n          color2: Color.fromARGB(255, 68, 21, 149),\n        ),\n//... cut off for brevity </code></pre></figure>\n<ol>\n<li>Named Constructor function. There can be many constructor functions per class</li>\n</ol>\n<figure class=\"code-block\"><pre id=\"code-block-103\" data-language=\"dart\"><code class=\"code-block language-dart\">class GradientContainer extends StatelessWidget {\n  const GradientContainer(\n\t  this.color1, this.color2, {super.key}\n  );\n\n  const GradientContainer.purp({super,key})\n\t  : color1 = Color.deepPurple,\n\t  : color2 = Color.indigo,\n//... cut off for brevity </code></pre></figure>\n<p>the use...</p>\n<figure class=\"code-block\"><pre id=\"code-block-104\" data-language=\"dart\"><code class=\"code-block language-dart\">//... cut off for brevity \n      home: Scaffold(\n        body: GradientContainer.purp(),\n//... cut off for brevity </code></pre></figure>\n<p><strong>Note</strong>, all of the above <strong>constructors</strong> are <code>const</code>. Meaning, only one global instance of this object is created and no field values can be changed during the life cycle of the object. <strong>Also, note,</strong> all instance of <code>super.key</code> are in curly brackets <code>{}</code> meaning it is an <strong>optional parameter</strong>. <code>super</code> refers to the parent class and <code>key</code> is _like a uuid_.</p>\n<p>---</p>\n<h5><code>Container</code></h5>\n<p>Is rendered as a box with many styling options. The <code>child</code> of each <code>Container</code> widget is the <code>Padding</code> widget, but The widget <code>Container</code> has a <code>padding</code> (lowercase 'p') property the essentially does the same thing.</p>\n<figure class=\"code-block\"><pre id=\"code-block-105\" data-language=\"dart\"><code class=\"code-block language-dart\">@override \nWidget build(BuildContext context) { \n\treturn Container( \n\t\tcolor: Colors.green,\n\t\tchild: Padding( \n\t\t\tpadding: const EdgeInsets.all(40),\n\t\t\tchild: Container( \n\t\t\t\tcolor: Colors.purple,\n\t\t\t\tchild: Padding(\n\t\t\t\t\tpadding: const EdgeInsets.all(50.0),\n\t\t\t\t\tchild: Container(\n\t\t\t\t\t\tcolor: Colors.blue,\n\t\t\t\t\t\t ), ), ), ), ); }</code></pre></figure>\n<p>This scheme is also acceptable. Using the <code>Container</code>'s property to achieve padding.</p>\n<figure class=\"code-block\"><pre id=\"code-block-106\" data-language=\"dart\"><code class=\"code-block language-dart\">child: Container(\n\tpadding: EdgeInsets.all(24),\n\tcolor: Colors.blue,\n\tchild: ...)</code></pre></figure>\n<p><code>Container</code>s provide their own transforms, paddings and margins. Also, two decorations: background and foreground decoration.</p>\n<h4><code>Scaffold</code></h4>\n<p>The root of the screen. Widgets that do not begin with <code>Scaffold</code> are intended to be components used to compose screens. This is a <strong>platform aware widget</strong>.</p>\n<h4><code>Center</code></h4>\n<p>Horizontally and vertically centers</p>\n<h4><code>AspectRatio</code></h4>\n<p>Tries the largest width possible in its context, and then set the height by applying the chosen ratio to the width. For example, an <code>AspectRatio</code> of 1 will set the height equal to the width.</p>",
      "directories": [],
      "files": [],
      "parent": "Flutter_Cookbook_Simone",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/Widgets.md",
      "aliases": [
        "Flutter_Cookbook_Simone/Widgets.html"
      ]
    },
    "Flutter_Cookbook_Simone": {
      "id": "Flutter_Cookbook_Simone",
      "type": "directory",
      "title": "[==Flutter Cookbook==: 100+ Step-By-step Recipes for Building Cross-platform, Professional-grade Apps with ==Flutter== 3. 10. x and Dart 3. x](https://i-share-dpu.primo.exlibrisgroup.com/discovery/fulldisplay?docid=cdi_proquest_ebookcentral_EBC30587007&context=PC&vid=01CARLI_DPU:CARLI_DPU&lang=en&search_scope=MyInst_and_CI&adaptor=Primo%20Central&tab=Everything&query=any%2Ccontains%2Cflutter%20cook%20book&offset=0)",
      "content": "<p>This folder contains notes from the book,</p>\n<h3><a href=\"https://i-share-dpu.primo.exlibrisgroup.com/discovery/fulldisplay?docid=cdi_proquest_ebookcentral_EBC30587007&amp;amp;context=PC&amp;amp;vid=01CARLI_DPU:CARLI_DPU&amp;amp;lang=en&amp;amp;search_scope=MyInst_and_CI&amp;amp;adaptor=Primo%20Central&amp;amp;tab=Everything&amp;amp;query=any%2Ccontains%2Cflutter%20cook%20book&amp;amp;offset=0\" target=\"_blank\" rel=\"noopener\">==Flutter Cookbook==: 100+ Step-By-step Recipes for Building Cross-platform, Professional-grade Apps with ==Flutter== 3. 10. x and Dart 3. x</a></h3>\n<p>AUTHOR: Alessandria, Simone</p>\n<p>PUBLISHED: 2023</p>\n<p>Accessed through <a href=\"https://i-share-dpu.primo.exlibrisgroup.com/view/action/uresolver.do?operation=resolveService&amp;amp;package_service_id=7065397630005831&amp;amp;institutionId=5831&amp;amp;customerId=5815&amp;amp;VE=true\" target=\"_blank\" rel=\"noopener\">O'Reilly Online Learning: Academic/Public Library Edition</a> from DePaul's databases.</p>\n<h3>Table of Context</h3>\n<ol>\n<li><a href=\"What_is_Flutter%3F\">What is Flutter</a></li>\n<li><a href=\"Project%20Setup\">Project Setup</a></li>\n<li><a href=\"The_Dart_Language\">The Dart Language</a></li>\n<ul>\n<li><a href=\"Computing/web_dev/Flutter/Flutter_Cookbook_Simone/Variables\">Variables</a></li>\n<li><a href=\"Variable%20Declaration%20versus%20Initialization\">Variable Declaration versus Initialization</a></li>\n</ul>\n<li><a href=\"Builtins%20or%20Reserved%20Words\">Builtins or Reserved Words</a></li>\n<li><a href=\"Everything%20is%20a%20Widget\">Everything is a Widget</a></li>\n<ul>\n<li><a href=\"simpleCustomWidget.png\">Simple Custom Widget</a></li>\n<li><a href=\"Widgets\">Widgets</a></li>\n<li><a href=\"Buttons\">Buttons</a></li>\n<li><a href=\"Column\">Column</a></li>\n<li><a href=\"Row%28%29%20vs.%20Column%28%29%20Widget.png\">Row() vs. Column() Widget.png</a></li>\n</ul>\n<li><a href=\"Layout\">Layout</a></li>\n<li><a href=\"Interactivity%20%26%20Navigation\">Interactivity &amp; Navigation</a></li>\n<ul>\n<li><a href=\"Connecting_Widgets.excalidraw\">Connecting Widgets</a></li>\n</ul>\n<li><a href=\"Mastering%20The%20Widget%20Tree\">Mastering The Widget Tree</a></li>\n<ul>\n<li><a href=\"PassingData.canvas\">Passing Data</a></li>\n</ul>\n<li><a href=\"Basic%20State%20Management\">Basic State Management</a></li>\n<li><a href=\"Unit_Testing\">Unit_Testing</a></li>\n<li><a href=\"CRUD\">CRUD.md</a></li>\n<li><a href=\"Computing/web_dev/Flutter/Flutter_Cookbook_Simone/Async\">Computing/web_dev/Flutter/Flutter_Cookbook_Simone/Async</a></li>\n<li><a href=\"Streams\">Streams</a></li>\n<ul>\n<li><a href=\"Stream_controller.excalidraw\">Stream Controller</a></li>\n</ul>\n<li><a href=\"Animate\">Animate</a></li>\n</ol>",
      "directories": [],
      "files": [
        "Flutter_Cookbook_Simone/Interactivity & Navigation",
        "Flutter_Cookbook_Simone/Async",
        "Flutter_Cookbook_Simone/Builtins or Reserved Words",
        "Flutter_Cookbook_Simone/What_is_Flutter?",
        "Flutter_Cookbook_Simone/Project Setup",
        "Flutter_Cookbook_Simone/CRUD",
        "Flutter_Cookbook_Simone/Everything is a Widget",
        "Flutter_Cookbook_Simone/The_Dart_Language",
        "Flutter_Cookbook_Simone/Animate",
        "Flutter_Cookbook_Simone/Layout",
        "Flutter_Cookbook_Simone/Variables",
        "Flutter_Cookbook_Simone/Widgets",
        "Flutter_Cookbook_Simone/Mastering The Widget Tree",
        "Flutter_Cookbook_Simone/Basic State Management",
        "Flutter_Cookbook_Simone/Connecting_Widgets.excalidraw",
        "Flutter_Cookbook_Simone/Stream_controller.excalidraw",
        "Flutter_Cookbook_Simone/Variable Declaration versus Initialization",
        "Flutter_Cookbook_Simone/Streams",
        "Flutter_Cookbook_Simone/Unit_Testing"
      ],
      "parent": "root",
      "basePath": "Flutter_Cookbook_Simone",
      "sourcePath": "Flutter_Cookbook_Simone/README.md",
      "aliases": [
        "Flutter_Cookbook_Simone/README.html"
      ]
    },
    "physics/golden_file": {
      "id": "physics/golden_file",
      "type": "file",
      "title": "Golden File",
      "content": "<p>this is the gold file</p>",
      "directories": [],
      "files": [],
      "parent": "physics",
      "basePath": "physics",
      "sourcePath": "physics/golden_file.md",
      "aliases": [
        "physics/golden_file.html"
      ]
    },
    "physics": {
      "id": "physics",
      "type": "directory",
      "title": "Physics",
      "content": "<p>here</p>",
      "directories": [],
      "files": [
        "physics/golden_file"
      ],
      "parent": "root",
      "basePath": "physics",
      "sourcePath": "physics/README.md",
      "aliases": [
        "physics/README.html"
      ]
    },
    "poetry/poet/scared to show this": {
      "id": "poetry/poet/scared to show this",
      "type": "file",
      "title": "Scared To Show This",
      "content": "",
      "directories": [],
      "files": [],
      "parent": "poetry/poet",
      "basePath": "poetry/poet",
      "sourcePath": "poetry/poet/scared to show this.md",
      "aliases": [
        "poetry/poet/scared to show this.html"
      ]
    },
    "poetry/poet": {
      "id": "poetry/poet",
      "type": "directory",
      "title": "Poet",
      "content": "",
      "directories": [],
      "files": [
        "poetry/poet/scared to show this"
      ],
      "parent": "poetry",
      "basePath": "poetry/poet",
      "sourcePath": "poetry/poet/README.md",
      "aliases": [
        "poetry/poet/README.html"
      ]
    },
    "testing123/t1/deep file": {
      "id": "testing123/t1/deep file",
      "type": "file",
      "title": "Deep File",
      "content": "<p>here it is!</p>",
      "directories": [],
      "files": [],
      "parent": "testing123/t1",
      "basePath": "testing123/t1",
      "sourcePath": "testing123/t1/deep file.md",
      "aliases": [
        "testing123/t1/deep file.html"
      ]
    },
    "testing123/t1": {
      "id": "testing123/t1",
      "type": "directory",
      "title": "T1",
      "content": "<figure class=\"image-block\"><img src=\"tp_map.png\" alt=\"tp_map\" /></figure>",
      "directories": [],
      "files": [
        "testing123/t1/deep file"
      ],
      "parent": "testing123",
      "basePath": "testing123/t1",
      "sourcePath": "testing123/t1/README.md",
      "aliases": [
        "testing123/t1/README.html"
      ]
    },
    "testing123": {
      "id": "testing123",
      "type": "directory",
      "title": "Testing123",
      "content": "",
      "directories": [
        "testing123/t1"
      ],
      "files": [],
      "parent": "root",
      "basePath": "testing123",
      "sourcePath": "testing123/README.md",
      "aliases": [
        "testing123/README.html"
      ]
    },
    "about page": {
      "id": "about page",
      "type": "file",
      "title": "About Page",
      "content": "<p>here is where i write aobut adfaf dfads afd ads fads</p>\n<p>asdfadsf</p>",
      "directories": [],
      "files": [],
      "parent": "root",
      "basePath": "",
      "sourcePath": "about page.md",
      "aliases": [
        "about page.html"
      ]
    },
    "homie": {
      "id": "homie",
      "type": "file",
      "title": "Homie",
      "content": "<p>Direction. More focus. Mo testing here Do i want gifs on repeat? <a href=\"https://archive.org/\" target=\"_blank\" rel=\"noopener\">See my blog</a> to read more thoughts <a href=\"https://gramjos.github.io/about\" target=\"_blank\" rel=\"noopener\">blog abouts pg</a> thoughts from blog to blog</p>\n<figure class=\"code-block\"><pre id=\"code-block-107\" data-language=\"rust\"><code class=\"code-block language-rust\">fn happyTime()</code></pre></figure>\n<p>WELCOME BACK TO TP!! CAMP! 🫥homie time from 🏠👻</p>\n<p>the title is always in the url</p>\n<figure class=\"image-block\"><img src=\"graphics/img1.png\" alt=\"img1\" /></figure>",
      "directories": [],
      "files": [],
      "parent": "root",
      "basePath": "",
      "sourcePath": "homie.md",
      "aliases": [
        "homie.html"
      ]
    },
    "root": {
      "id": "root",
      "type": "directory",
      "title": "Home",
      "content": "<p>this is the first line of the page</p>\n<p><code>build.sh</code> is working $Hi there$</p>\n<h1>What is up with the <code>qb</code> build script!</h1>\n<p>Free Speech is 🔥 $$2+2$$ This is your new <em>vault</em>. by G. Joseph J.</p>\n<p>Make a note of something, <a href=\"create%20a%20link\">create a link</a>, or try <a href=\"https://help.obsidian.md/Plugins/Importer\" target=\"_blank\" rel=\"noopener\">the Importer</a>!</p>\n<p>When you're ready, delete this note and make the vault your own.</p>",
      "directories": [
        "Flutter_Cookbook_Simone",
        "Astro",
        "physics",
        "testing123"
      ],
      "files": [
        "about page",
        "homie"
      ],
      "parent": null,
      "basePath": "",
      "sourcePath": "README.md",
      "aliases": [
        "README.html"
      ]
    }
  }
}